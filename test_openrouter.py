#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è openrouter_models.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
src_path = os.path.join(os.path.dirname(__file__), 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
logs_dir = os.path.join(os.path.dirname(__file__), 'logs')
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

try:
    from src.core.openrouter_models import (
        get_openrouter_models, 
        categorize_models, 
        get_model_tooltip_text
    )
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è openrouter_models...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π OpenRouter...")
    models = get_openrouter_models()
    
    if models and "data" in models:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(models['data'])} –º–æ–¥–µ–ª–µ–π")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ –ø–ª–∞—Ç–Ω—ã–µ
        free_models, paid_models = categorize_models(models)
        print(f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(free_models)}")
        print(f"üí∞ –ü–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(paid_models)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏
        if models["data"]:
            first_model_id = models["data"][0]["id"]
            print(f"‚ÑπÔ∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏: {first_model_id}")
            tooltip = get_model_tooltip_text(first_model_id)
            print(f"üìù –ü–æ–¥—Å–∫–∞–∑–∫–∞: {tooltip[:100]}...")
            
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    import traceback
    traceback.print_exc()