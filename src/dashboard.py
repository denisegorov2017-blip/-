#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ Streamlit –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–î–ª—è –∑–∞–ø—É—Å–∫–∞: streamlit run dashboard.py
"""

import streamlit as st
import pandas as pd
import os
import plotly.express as px
import plotly.graph_objects as go
import webbrowser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    layout="wide", 
    page_title="–î–∞—à–±–æ—Ä–¥ –†–∞—Å—á–µ—Ç–∞ –£—Å—É—à–∫–∏", 
    page_icon="üìä",
    initial_sidebar_state="expanded"
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
st.markdown("""
<style>
    /* –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
    .main-header {
        background: linear-gradient(135deg, #2c3e50, #4a6491, #2c3e50);
        padding: 30px;
        border-radius: 20px;
        color: white;
        text-align: center;
        margin-bottom: 30px;
        box-shadow: 0 6px 20px rgba(0,0,0,0.25);
        position: relative;
        overflow: hidden;
    }
    
    .main-header::before {
        content: "";
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%);
        transform: rotate(30deg);
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º */
    .metric-card {
        background: linear-gradient(135deg, #ffffff, #f8f9fa);
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 6px 20px rgba(0,0,0,0.12);
        text-align: center;
        height: 100%;
        border: 1px solid #e9ecef;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        position: relative;
        overflow: hidden;
    }
    
    .metric-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(90deg, #3498db, #2980b9);
    }
    
    .metric-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 30px rgba(0,0,0,0.2);
    }
    
    .metric-value {
        font-size: 32px;
        font-weight: 800;
        color: #2c3e50;
        margin: 15px 0;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .metric-card:hover .metric-value {
        transform: scale(1.05);
    }
    
    .metric-label {
        font-size: 16px;
        color: #6c757d;
        font-weight: 600;
    }
    
    /* –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */
    .info-card {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        border-left: 8px solid #2196f3;
        padding: 25px;
        border-radius: 15px;
        margin: 20px 0;
        box-shadow: 0 4px 15px rgba(33, 150, 243, 0.15);
        position: relative;
        overflow: hidden;
    }
    
    .info-card::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        width: 100px;
        height: 100px;
        background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 70%);
        transform: translate(40%, -40%);
    }
    
    /* –ö–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ */
    .report-buttons {
        background: linear-gradient(135deg, #e8f5e9, #c8e6c9);
        padding: 25px;
        border-radius: 15px;
        margin: 25px 0;
        text-align: center;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
    }
    
    .report-buttons::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background: linear-gradient(90deg, #4caf50, #2e7d32);
    }
    
    /* –°–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ */
    .section-header {
        background: linear-gradient(90deg, #f8f9fa, #e9ecef);
        padding: 20px;
        border-radius: 15px;
        margin: 25px 0 20px 0;
        border-left: 6px solid #007bff;
        box-shadow: 0 3px 10px rgba(0,123,255,0.1);
        display: flex;
        align-items: center;
    }
    
    .section-header h2 {
        margin: 0;
        font-weight: 700;
        color: #2c3e50;
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    /* –í–∫–ª–∞–¥–∫–∏ */
    .stTabs [data-baseweb="tab-list"] {
        gap: 30px;
        padding: 10px;
        background: linear-gradient(180deg, #f8f9fa, #e9ecef);
        border-radius: 12px 12px 0 0;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 55px;
        white-space: pre-wrap;
        background-color: #ffffff;
        border-radius: 10px 10px 0 0;
        gap: 1px;
        padding: 12px 20px;
        font-weight: 600;
        color: #6c757d;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        box-shadow: 0 4px 10px rgba(0,123,255,0.3);
        transform: translateY(-2px);
    }
    
    /* –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ */
    [data-testid=stSidebar] {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-right: 1px solid #dee2e6;
        padding: 20px;
    }
    
    [data-testid=stSidebar] .stMarkdown {
        padding: 15px;
        border-radius: 10px;
        background: rgba(255,255,255,0.7);
        margin-bottom: 15px;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton>button {
        border-radius: 10px;
        height: 3.8rem;
        font-weight: 600;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        box-shadow: 0 3px 8px rgba(0,0,0,0.1);
        border: none;
    }
    
    .stButton>button:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(0,0,0,0.2);
    }
    
    .stButton>button:active {
        transform: translateY(-1px);
    }
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    .stDataFrame {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }
    
    .stDataFrame table {
        border-collapse: separate;
        border-spacing: 0;
    }
    
    .stDataFrame th {
        background: linear-gradient(180deg, #3498db, #2980b9);
        color: white;
    }
    
    .stDataFrame tr:nth-child(even) {
        background-color: #f8fafc;
    }
    
    .stDataFrame tr:hover {
        background-color: #e3f2fd;
        transition: background-color 0.3s ease;
    }
    
    /* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã */
    .stSelectbox div[data-baseweb="select"] {
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }
    
    .stSelectbox div[data-baseweb="select"]:hover {
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }
    
    /* –°–ª–∞–π–¥–µ—Ä—ã */
    .stSlider div[data-baseweb="slider"] {
        height: 35px;
    }
    
    .stSlider div[data-baseweb="slider"] [role="slider"] {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        background: #007bff;
        box-shadow: 0 2px 8px rgba(0,123,255,0.4);
        transition: all 0.3s ease;
    }
    
    .stSlider div[data-baseweb="slider"] [role="slider"]:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(0,123,255,0.6);
    }
    
    /* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é */
    .nav-menu {
        display: flex;
        background: linear-gradient(135deg, #2c3e50, #4a6491);
        border-radius: 15px;
        padding: 10px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    
    .nav-item {
        flex: 1;
        text-align: center;
        padding: 15px;
        color: white;
        font-weight: 600;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .nav-item:hover {
        background: rgba(255,255,255,0.2);
        transform: translateY(-3px);
    }
    
    .nav-item.active {
        background: linear-gradient(135deg, #3498db, #2980b9);
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö */
    .data-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        margin-bottom: 20px;
        border: 1px solid #eef2f7;
        transition: all 0.3s ease;
    }
    
    .data-card:hover {
        box-shadow: 0 6px 20px rgba(0,0,0,0.12);
        transform: translateY(-3px);
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.6s ease-out forwards;
    }
    
    .delay-1 { animation-delay: 0.1s; }
    .delay-2 { animation-delay: 0.2s; }
    .delay-3 { animation-delay: 0.3s; }
    .delay-4 { animation-delay: 0.4s; }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media (max-width: 768px) {
        .nav-menu {
            flex-direction: column;
        }
        
        .metric-card {
            margin-bottom: 20px;
        }
        
        .stButton>button {
            width: 100%;
            margin-bottom: 10px;
        }
        
        .section-header h2 {
            font-size: 20px;
        }
        
        .main-header {
            padding: 20px;
        }
        
        .main-header h1 {
            font-size: 24px;
        }
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
st.markdown('''<div class="main-header">
    <h1>üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—É—à–∫–∏</h1>
    <p style="font-size: 20px; opacity: 0.95; margin-top: 15px; font-weight: 300;">–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —É—Å—É—à–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</p>
</div>''', unsafe_allow_html=True)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é
st.markdown('''
<div class="nav-menu">
    <div class="nav-item active">üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</div>
    <div class="nav-item">üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</div>
    <div class="nav-item">üìã –û—Ç—á–µ—Ç—ã</div>
    <div class="nav-item">‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ</div>
</div>
''', unsafe_allow_html=True)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ", expanded=False):
    st.markdown("""
    ### üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —É—Å—É—à–∫–∏
    
    –î–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
    - üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É—Å—É—à–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    - üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
    - üìà –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    - üîé –ü–æ–∏—Å–∫–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    
    **–¢–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
    - üêü **–•/–ö** - –•–æ–ª–æ–¥–Ω–æ–µ –∫–æ–ø—á–µ–Ω–∏–µ
    - üêü **–ì/–ö** - –ì–æ—Ä—è—á–µ–µ –∫–æ–ø—á–µ–Ω–∏–µ
    - üêü **–°/—Å** - –°–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è —Ä—ã–±–∞
    
    ---
    
    üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data(file_path):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas, —Ç.–∫. streamlit –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å –Ω–∏–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df = pd.read_html(file_path, encoding="utf-8")[0]
        return df
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞: {e}")
        return pd.DataFrame()

# --- –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ --- 
output_dir = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
if os.path.exists(output_dir):
    # Get all report files
    all_report_files = [f for f in os.listdir(output_dir) if f.endswith('.html')]
    
    # Categorize reports
    coefficient_reports = [f for f in all_report_files if f.startswith('–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã')]
    error_reports = [f for f in all_report_files if f.startswith('–æ—à–∏–±–∫–∏')]
    no_inventory_reports = [f for f in all_report_files if f.startswith('–ø–æ–∑–∏—Ü–∏–∏_–±–µ–∑_–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏')]
    model_comparison_reports = [f for f in all_report_files if f.startswith('—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–º–æ–¥–µ–ª–µ–π')]
    nomenclature_performance_reports = [f for f in all_report_files if f.startswith('–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä')]
    
    # Use coefficient reports as the main reports for selection
    report_files = coefficient_reports
    
    if report_files:
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        st.markdown('<div class="section-header"><h2>üìÇ –í—ã–±–æ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h2></div>', unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç—á–µ—Ç–æ–≤
        st.markdown(f'''
        <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 20px; border-radius: 15px; margin-bottom: 20px; border-left: 5px solid #2196f3;">
            <h4 style="margin: 0 0 10px 0; color: #1a237e;">üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</h4>
            <p style="margin: 0; font-size: 18px; font-weight: 700;">–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {len(report_files)}</p>
            <p style="margin: 5px 0 0 0; font-size: 14px; opacity: 0.8;">–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
        </div>
        ''', unsafe_allow_html=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        st.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(report_files)}")
        
        selected_report = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
            report_files, 
            key="report_selector",
            help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        )
        report_path = os.path.join(output_dir, selected_report)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        st.markdown('<div class="report-buttons">', unsafe_allow_html=True)
        st.markdown("<h3>üöÄ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á–µ—Ç–∞–º</h3><p style='margin-top: 10px; opacity: 0.8;'>–û—Ç–∫—Ä–æ–π—Ç–µ –æ—Ç—á–µ—Ç—ã –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</p>", unsafe_allow_html=True)
        
        # Create columns for report buttons
        cols = st.columns(3)
        
        with cols[0]:
            if st.button("üìñ –û—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç", use_container_width=True):
                try:
                    os.startfile(os.path.abspath(report_path))  # –î–ª—è Windows
                    st.success("–û—Ç—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç: {e}")
        
        with cols[1]:
            if st.button("üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –æ—Ç—á–µ—Ç–∞–º–∏", use_container_width=True):
                try:
                    os.startfile(os.path.abspath(output_dir))  # –î–ª—è Windows
                    st.success("–ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∞")
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
        
        with cols[2]:
            if st.button("üìã –í—Å–µ –æ—Ç—á–µ—Ç—ã", use_container_width=True):
                st.session_state.show_all_reports = not st.session_state.get("show_all_reports", False)
        
        # Show all reports if button is clicked
        if st.session_state.get("show_all_reports", False):
            st.markdown("---")
            st.subheader("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
            
            # Coefficient reports
            if coefficient_reports:
                st.markdown("**üìä –û—Ç—á–µ—Ç—ã –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º —É—Å—É—à–∫–∏:**")
                for report in coefficient_reports[:5]:  # Show first 5
                    report_path_full = os.path.join(output_dir, report)
                    if st.button(f"üìä {report}", key=f"coeff_{report}"):
                        try:
                            os.startfile(os.path.abspath(report_path_full))
                            st.success(f"–û—Ç—á–µ—Ç {report} –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                        except Exception as e:
                            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç: {e}")
                if len(coefficient_reports) > 5:
                    st.caption(f"... –∏ –µ—â–µ {len(coefficient_reports) - 5} –æ—Ç—á–µ—Ç–æ–≤")
            
            # Error reports
            if error_reports:
                st.markdown("**‚ö†Ô∏è –û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö:**")
                for report in error_reports[:5]:  # Show first 5
                    report_path_full = os.path.join(output_dir, report)
                    if st.button(f"‚ö†Ô∏è {report}", key=f"error_{report}"):
                        try:
                            os.startfile(os.path.abspath(report_path_full))
                            st.success(f"–û—Ç—á–µ—Ç {report} –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                        except Exception as e:
                            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç: {e}")
                if len(error_reports) > 5:
                    st.caption(f"... –∏ –µ—â–µ {len(error_reports) - 5} –æ—Ç—á–µ—Ç–æ–≤")
            
            # No inventory reports
            if no_inventory_reports:
                st.markdown("**üì¶ –û—Ç—á–µ—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –±–µ–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:**")
                for report in no_inventory_reports[:5]:  # Show first 5
                    report_path_full = os.path.join(output_dir, report)
                    if st.button(f"üì¶ {report}", key=f"no_inv_{report}"):
                        try:
                            os.startfile(os.path.abspath(report_path_full))
                            st.success(f"–û—Ç—á–µ—Ç {report} –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                        except Exception as e:
                            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç: {e}")
                if len(no_inventory_reports) > 5:
                    st.caption(f"... –∏ –µ—â–µ {len(no_inventory_reports) - 5} –æ—Ç—á–µ—Ç–æ–≤")
            
            # Model comparison reports
            if model_comparison_reports:
                st.markdown("**üî¨ –û—Ç—á–µ—Ç—ã –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:**")
                for report in model_comparison_reports[:5]:  # Show first 5
                    report_path_full = os.path.join(output_dir, report)
                    if st.button(f"üî¨ {report}", key=f"model_{report}"):
                        try:
                            os.startfile(os.path.abspath(report_path_full))
                            st.success(f"–û—Ç—á–µ—Ç {report} –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                        except Exception as e:
                            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç: {e}")
                if len(model_comparison_reports) > 5:
                    st.caption(f"... –∏ –µ—â–µ {len(model_comparison_reports) - 5} –æ—Ç—á–µ—Ç–æ–≤")
            
            # Nomenclature performance reports
            if nomenclature_performance_reports:
                st.markdown("**üìà –û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä:**")
                for report in nomenclature_performance_reports[:5]:  # Show first 5
                    report_path_full = os.path.join(output_dir, report)
                    if st.button(f"üìà {report}", key=f"perf_{report}"):
                        try:
                            os.startfile(os.path.abspath(report_path_full))
                            st.success(f"–û—Ç—á–µ—Ç {report} –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                        except Exception as e:
                            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç: {e}")
                if len(nomenclature_performance_reports) > 5:
                    st.caption(f"... –∏ –µ—â–µ {len(nomenclature_performance_reports) - 5} –æ—Ç—á–µ—Ç–æ–≤")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç—á–µ—Ç–∞..."):
            data = load_data(report_path)

        if not data.empty:
            st.markdown('<div class="section-header"><h2>üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</h2></div>', unsafe_allow_html=True)

            # --- –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ ---
            with st.sidebar:
                st.header("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
                st.markdown('<div style="background: #e3f2fd; padding: 15px; border-radius: 10px; margin-bottom: 20px;">'
                           '<h4>üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</h4>'
                           '<p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö</p></div>', 
                           unsafe_allow_html=True)
                
                min_accuracy = st.slider(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (%)", 
                    min_value=0.0, 
                    max_value=100.0, 
                    value=80.0, 
                    step=1.0,
                    help="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
                )
                
                search_text = st.text_input(
                    "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ",
                    help="–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞"
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                st.markdown("---")
                st.subheader("üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A
                if 'a' in data.columns:
                    # Convert to numeric first to handle non-numeric values like '‚Äî'
                    data['a'] = pd.to_numeric(data['a'], errors='coerce')
                    min_a_val = float(data['a'].min())
                    max_a_val = float(data['a'].max())
                    # Handle case where min and max are the same or NaN
                    if min_a_val == max_a_val or pd.isna(min_a_val) or pd.isna(max_a_val):
                        min_a_val = 0.0 if pd.isna(min_a_val) else min_a_val - 0.1 if min_a_val > 0.1 else 0.0
                        max_a_val = 1.0 if pd.isna(max_a_val) else max_a_val + 0.1
                    min_a, max_a = st.slider(
                        "–î–∏–∞–ø–∞–∑–æ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A",
                        min_a_val, 
                        max_a_val,
                        (min_a_val, max_a_val),
                        help="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A"
                    )
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B
                if 'b (–¥–µ–Ω—å‚Åª¬π)' in data.columns:
                    # Convert to numeric first to handle non-numeric values like '‚Äî'
                    data['b (–¥–µ–Ω—å‚Åª¬π)'] = pd.to_numeric(data['b (–¥–µ–Ω—å‚Åª¬π)'], errors='coerce')
                    min_b_val = float(data['b (–¥–µ–Ω—å‚Åª¬π)'].min())
                    max_b_val = float(data['b (–¥–µ–Ω—å‚Åª¬π)'].max())
                    # Handle case where min and max are the same or NaN
                    if min_b_val == max_b_val or pd.isna(min_b_val) or pd.isna(max_b_val):
                        min_b_val = 0.0 if pd.isna(min_b_val) else min_b_val - 0.1 if min_b_val > 0.1 else 0.0
                        max_b_val = 1.0 if pd.isna(max_b_val) else max_b_val + 0.1
                    min_b, max_b = st.slider(
                        "–î–∏–∞–ø–∞–∑–æ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B",
                        min_b_val, 
                        max_b_val,
                        (min_b_val, max_b_val),
                        help="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B"
                    )

            # --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã (already done above, but keeping for clarity)
            data['–¢–æ—á–Ω–æ—Å—Ç—å (%)'] = pd.to_numeric(data['–¢–æ—á–Ω–æ—Å—Ç—å (%)'], errors='coerce')
            # data['a'] = pd.to_numeric(data['a'], errors='coerce')  # Already converted above
            # data['b (–¥–µ–Ω—å‚Åª¬π)'] = pd.to_numeric(data['b (–¥–µ–Ω—å‚Åª¬π)'], errors='coerce')  # Already converted above
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_data = data.copy()
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            if '–¢–æ—á–Ω–æ—Å—Ç—å (%)' in filtered_data.columns:
                valid_accuracy_data = filtered_data.dropna(subset=['–¢–æ—á–Ω–æ—Å—Ç—å (%)'])
                filtered_data = valid_accuracy_data[valid_accuracy_data['–¢–æ—á–Ω–æ—Å—Ç—å (%)'] >= min_accuracy]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
            if search_text:
                filtered_data = filtered_data[filtered_data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'].str.contains(search_text, case=False, na=False)]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É A
            if 'a' in filtered_data.columns and 'a' in data.columns:
                filtered_data = filtered_data[
                    (filtered_data['a'] >= min_a) & 
                    (filtered_data['a'] <= max_a)
                ]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É B
            if 'b (–¥–µ–Ω—å‚Åª¬π)' in filtered_data.columns and 'b (–¥–µ–Ω—å‚Åª¬π)' in data.columns:
                filtered_data = filtered_data[
                    (filtered_data['b (–¥–µ–Ω—å‚Åª¬π)'] >= min_b) & 
                    (filtered_data['b (–¥–µ–Ω—å‚Åª¬π)'] <= max_b)
                ]

            # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å ---
            st.markdown('''
            <div class="info-card">
                <div style="display: flex; justify-content: space-around; flex-wrap: wrap;">
                    <div style="text-align: center; padding: 10px;">
                        <h4 style="margin: 0 0 10px 0; color: #1a237e;">üìÇ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª</h4>
                        <p style="margin: 0; font-size: 16px; font-weight: 600;">{selected_report}</p>
                    </div>
                    <div style="text-align: center; padding: 10px;">
                        <h4 style="margin: 0 0 10px 0; color: #1a237e;">üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</h4>
                        <p style="margin: 0; font-size: 24px; font-weight: 800; color: #2196f3;">{len(data)}</p>
                    </div>
                    <div style="text-align: center; padding: 10px;">
                        <h4 style="margin: 0 0 10px 0; color: #1a237e;">üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</h4>
                        <p style="margin: 0; font-size: 24px; font-weight: 800; color: #4caf50;">{len(filtered_data)}</p>
                    </div>
                </div>
            </div>
            ''', unsafe_allow_html=True)

            # --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
            st.markdown('<div class="section-header"><h2>üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2></div>', unsafe_allow_html=True)
            
            if not filtered_data.empty:
                # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
                metrics_col1, metrics_col2, metrics_col3, metrics_col4 = st.columns(4)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ—Ç—Ä–∏–∫
                st.markdown("""
                <style>
                @keyframes fadeInUp {
                    from {
                        opacity: 0;
                        transform: translateY(20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
                .metric-card {
                    animation: fadeInUp 0.6s ease-out forwards;
                }
                </style>
                """, unsafe_allow_html=True)
                
                # –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π
                with metrics_col1:
                    st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                    st.markdown('<div class="metric-label">–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π</div>', unsafe_allow_html=True)
                    st.markdown(f'<div class="metric-value">{len(filtered_data)}</div>', unsafe_allow_html=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # –°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A
                with metrics_col2:
                    if 'a' in filtered_data.columns:
                        avg_a = filtered_data['a'].dropna().mean()
                        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                        st.markdown('<div class="metric-label">–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ. A</div>', unsafe_allow_html=True)
                        st.markdown(f'<div class="metric-value">{avg_a:.3f}</div>', unsafe_allow_html=True)
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # –°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B
                with metrics_col3:
                    if 'b (–¥–µ–Ω—å‚Åª¬π)' in filtered_data.columns:
                        avg_b = filtered_data['b (–¥–µ–Ω—å‚Åª¬π)'].dropna().mean()
                        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                        st.markdown('<div class="metric-label">–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ. B</div>', unsafe_allow_html=True)
                        st.markdown(f'<div class="metric-value">{avg_b:.3f}</div>', unsafe_allow_html=True)
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å
                with metrics_col4:
                    if '–¢–æ—á–Ω–æ—Å—Ç—å (%)' in filtered_data.columns:
                        avg_accuracy = filtered_data['–¢–æ—á–Ω–æ—Å—Ç—å (%)'].dropna().mean()
                        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                        st.markdown('<div class="metric-label">–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å</div>', unsafe_allow_html=True)
                        st.markdown(f'<div class="metric-value">{avg_accuracy:.1f}%</div>', unsafe_allow_html=True)
                        st.markdown('</div>', unsafe_allow_html=True)

                # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
                st.markdown('<div class="section-header"><h2>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</h2></div>', unsafe_allow_html=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ
                st.markdown("""
                <div style="background: #fff3cd; padding: 15px; border-radius: 10px; border-left: 5px solid #ffc107; margin-bottom: 20px;">
                    <p style="margin: 0; color: #856404;"><strong>‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–ª–∏–∫–∞—è –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Å—Ç–æ–ª–±—Ü–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
                </div>
                """, unsafe_allow_html=True)
                st.dataframe(filtered_data, use_container_width=True)
                
                # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
                st.markdown('<div class="section-header"><h2>üìâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</h2></div>', unsafe_allow_html=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                st.markdown("""
                <div style="background: #d1ecf1; padding: 15px; border-radius: 10px; border-left: 5px solid #0c5460; margin-bottom: 20px;">
                    <p style="margin: 0; color: #0c5460;"><strong>üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:</strong> –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã. –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Tabs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                viz_tab1, viz_tab2, viz_tab3 = st.tabs(["üìà –¢–æ—á–Ω–æ—Å—Ç—å", "üîÑ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "üìã –î–µ—Ç–∞–ª–∏"])
                
                with viz_tab1:
                    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                    if not filtered_data.empty and '–¢–æ—á–Ω–æ—Å—Ç—å (%)' in filtered_data.columns and not filtered_data['–¢–æ—á–Ω–æ—Å—Ç—å (%)'].isna().all():
                        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                        accuracy_data = filtered_data['–¢–æ—á–Ω–æ—Å—Ç—å (%)'].dropna()
                        if len(accuracy_data) > 0:
                            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                            fig_hist = px.histogram(filtered_data, x='–¢–æ—á–Ω–æ—Å—Ç—å (%)', 
                                                  nbins=20, 
                                                  title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤',
                                                  labels={'–¢–æ—á–Ω–æ—Å—Ç—å (%)': '–¢–æ—á–Ω–æ—Å—Ç—å (%)', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'},
                                                  color_discrete_sequence=['#2196f3'])
                            fig_hist.update_layout(bargap=0.1, plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
                            st.plotly_chart(fig_hist, use_container_width=True)
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                            col1, col2 = st.columns(2)
                            with col1:
                                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏:**")
                                st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {accuracy_data.min():.1f}%")
                                st.write(f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {accuracy_data.max():.1f}%")
                                st.write(f"- –°—Ä–µ–¥–Ω—è—è: {accuracy_data.mean():.1f}%")
                                st.write(f"- –ú–µ–¥–∏–∞–Ω–∞: {accuracy_data.median():.1f}%")
                            
                            with col2:
                                # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ—á–Ω–æ—Å—Ç–∏
                                high_acc = len(accuracy_data[accuracy_data >= 95])
                                med_acc = len(accuracy_data[(accuracy_data >= 80) & (accuracy_data < 95)])
                                low_acc = len(accuracy_data[accuracy_data < 80])
                                
                                fig_pie = px.pie(values=[high_acc, med_acc, low_acc], 
                                               names=['–í—ã—Å–æ–∫–∞—è (‚â•95%)', '–°—Ä–µ–¥–Ω—è—è (80-95%)', '–ù–∏–∑–∫–∞—è (<80%)'],
                                               title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ—á–Ω–æ—Å—Ç–∏',
                                               color_discrete_sequence=['#4caf50', '#ff9800', '#f44336'])
                                st.plotly_chart(fig_pie, use_container_width=True)
                        else:
                            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏")
                    else:
                        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏")
                
                with viz_tab2:
                    st.subheader("üîÑ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                    if not filtered_data.empty and 'a' in filtered_data.columns and 'b (–¥–µ–Ω—å‚Åª¬π)' in filtered_data.columns:
                        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                        chart_data = filtered_data.dropna(subset=['a', 'b (–¥–µ–Ω—å‚Åª¬π)'])
                        if not chart_data.empty:
                            # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è
                            fig_scatter = px.scatter(chart_data, x="a", y="b (–¥–µ–Ω—å‚Åª¬π)", 
                                                   hover_data=['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'],
                                                   title='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ A –∏ B',
                                                   labels={'a': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A', 'b (–¥–µ–Ω—å‚Åª¬π)': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B (–¥–µ–Ω—å‚Åª¬π)'},
                                                   color='–¢–æ—á–Ω–æ—Å—Ç—å (%)',
                                                   color_continuous_scale='viridis')
                            fig_scatter.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
                            st.plotly_chart(fig_scatter, use_container_width=True)
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            correlation = chart_data['a'].corr(chart_data['b (–¥–µ–Ω—å‚Åª¬π)'])
                            st.write("**–ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:**")
                            st.write(f"- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.3f}")
                            
                            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
                            col1, col2 = st.columns(2)
                            with col1:
                                fig_a = px.histogram(chart_data, x='a', nbins=20, 
                                                   title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A',
                                                   labels={'a': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'},
                                                   color_discrete_sequence=['#e91e63'])
                                fig_a.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
                                st.plotly_chart(fig_a, use_container_width=True)
                            
                            with col2:
                                fig_b = px.histogram(chart_data, x='b (–¥–µ–Ω—å‚Åª¬π)', nbins=20,
                                                   title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B',
                                                   labels={'b (–¥–µ–Ω—å‚Åª¬π)': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B (–¥–µ–Ω—å‚Åª¬π)', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'},
                                                   color_discrete_sequence=['#9c27b0'])
                                fig_b.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
                                st.plotly_chart(fig_b, use_container_width=True)
                        else:
                            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
                    else:
                        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
                
                with viz_tab3:
                    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    if not filtered_data.empty:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ–∑–∏—Ü–∏–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
                        if '–¢–æ—á–Ω–æ—Å—Ç—å (%)' in filtered_data.columns:
                            top_accuracy = filtered_data.nlargest(10, '–¢–æ—á–Ω–æ—Å—Ç—å (%)')
                            st.write("**–¢–æ–ø-10 –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏:**")
                            st.dataframe(top_accuracy[['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–¢–æ—á–Ω–æ—Å—Ç—å (%)']], use_container_width=True)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É 'a'
                        if 'a' in filtered_data.columns:
                            top_a = filtered_data.nlargest(10, 'a')
                            st.write("**–¢–æ–ø-10 –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É 'a':**")
                            st.dataframe(top_a[['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', 'a']], use_container_width=True)
                        
                        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        st.write("**–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")
                        st.dataframe(filtered_data, use_container_width=True)

            else:
                st.warning("–ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    else:
        st.warning("–í –ø–∞–ø–∫–µ '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º.")
else:
    st.error("–ü–∞–ø–∫–∞ '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç.")