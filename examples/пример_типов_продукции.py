#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
"""

import sys
import os
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from shrinkage_project.adaptive_shrinkage_calculator import AdaptiveShrinkageModel

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    print("üî¨ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä—ã–±–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    product_examples = [
        ("–©–£–ö–ê –°–í–ï–ñ–ê–Ø", 100.0, "–°–≤–µ–∂–∞—è —Ä—ã–±–∞"),
        ("–°–ö–£–ú–ë–†–ò–Ø –°/–°", 100.0, "–°–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è —Ä—ã–±–∞"),
        ("–°–ï–õ–¨–î–¨ –•/–ö", 100.0, "–•–æ–ª–æ–¥–Ω–æ–µ –∫–æ–ø—á–µ–Ω–∏–µ"),
        ("–û–ö–£–ù–¨ –ì/–ö", 100.0, "–ì–æ—Ä—è—á–µ–µ –∫–æ–ø—á–µ–Ω–∏–µ"),
        ("–¢–†–ï–°–ö–ê –ö–û–ü–ß–ï–ù–ê–Ø", 100.0, "–ö–æ–ø—á–µ–Ω–∞—è —Ä—ã–±–∞"),
        ("–°–£–î–ê–ö –°–£–®–ï–ù–ê–Ø", 100.0, "–°—É—à–µ–Ω–∞—è/–≤—è–ª–µ–Ω–∞—è —Ä—ã–±–∞")
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []
    
    print("üìä –ü—Ä–æ–≥–Ω–æ–∑—ã —É—Å—É—à–∫–∏ –¥–ª—è 100 –∫–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞ 7 –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    print("-" * 70)
    
    for nomenclature, initial_weight, product_type_desc in product_examples:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        product_type = model.determine_product_type(nomenclature)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —É—Å—É—à–∫—É
        forecast = model.predict_with_adaptation(7, nomenclature=nomenclature)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å—É—à–∫–∏
        shrinkage_percentage = (forecast / initial_weight) * 100
        
        print(f"{nomenclature:20} ({product_type_desc:15}) -> {forecast:.3f} –∫–≥ ({shrinkage_percentage:.2f}%)")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        product_coeffs = model.product_coefficients[product_type]
        adapted_a = model.base_coefficients['a'] * product_coeffs['a_multiplier']
        adapted_b = model.base_coefficients['b'] * product_coeffs['b_multiplier']
        adapted_c = model.base_coefficients['c'] * product_coeffs['c_multiplier']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è CSV
        results.append({
            "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": nomenclature,
            "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏": product_type,
            "a": adapted_a,
            "b": adapted_b,
            "c": adapted_c,
            "–ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏": forecast
        })
    
    print("\n" + "=" * 70)
    print("üìã –í–∞–∂–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ:")
    print("   –£–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —É—Å—É—à–∫–∏ —è–≤–ª—è—é—Ç—Å—è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ú–ò –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
    print("   –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —ç—Ç–∏ –ø—Ä–µ–¥–µ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç:")
    print("   - –£—Å–ª–æ–≤–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å)")
    print("   - –°–µ–∑–æ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
    print("   - –ö–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å—ã—Ä—å—è")
    print("   - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª
    results_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'))
    os.makedirs(results_dir, exist_ok=True)
    
    df = pd.DataFrame(results)
    csv_path = os.path.join(results_dir, "–ø—Ä–∏–º–µ—Ä_—Ç–∏–ø–æ–≤_–ø—Ä–æ–¥—É–∫—Ü–∏–∏.csv")
    df.to_csv(csv_path, index=False, encoding='utf-8-sig')
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {csv_path}")

if __name__ == "__main__":
    main()