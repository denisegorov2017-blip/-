#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏
"""

import sys
import os
import json
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from shrinkage_project.adaptive_shrinkage_calculator import AdaptiveShrinkageModel
from shrinkage_project.data_models import NomenclatureRow

def extract_product_data_from_real_file(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    df = pd.read_excel(file_path, header=None)
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–±–µ)
    product_rows = df[df[0].str.contains('–†–´–ë–ê|–°–ï–õ–¨–î–¨|–°–ö–£–ú–ë–†–ò–Ø|–©–£–ö–ê|–û–ö–£–ù–¨|–ì–û–†–ë–£–®–ê|–ö–ï–¢–ê|–°–ï–ú–ì–ê|–§–û–†–ï–õ–¨|–ò–ö–†–ê|–ö–†–ï–í–ï–¢–ö–ò|–ú–ê–°–õ–ï–ù–ê–Ø|–ù–ï–†–ö–ê|–ú–û–ô–í–ê|–Æ–ö–û–õ–ê|–í–û–ú–ï–†|–ë–†–Æ–®–ö–ò|–ö–û–†–Æ–®–ö–ê|–õ–ï–©|–°–ò–ì|–î–û–†–ê–î–û|–ë–ï–õ–û–†–´–ë–ò–¶–ê|–¢–ê–†–ê–ù–¨|–ß–ï–•–û–ù–¨|–ü–ï–õ–Ø–î–¨|–í–û–ë–õ–ê|–ö–ê–ú–ë–ê–õ–ê|–•/–ö|–ì/–ö|–°/–°', case=False, na=False) & 
                      ~df[0].str.contains('–í–µ–¥–æ–º–æ—Å—Ç—å|–ü–∞—Ä–∞–º–µ—Ç—Ä—ã|–û—Ç–±–æ—Ä|–°–∫–ª–∞–¥|–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞|–î–æ–∫—É–º–µ–Ω—Ç|–ü–∞—Ä—Ç–∏—è|–û—Ç—á–µ—Ç|–ü—Ä–∏—Ö–æ–¥–Ω–∞—è|–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è|–ú–æ–Ω–µ—Ç–∫–∞ —Ä—ã–±–∞', case=False, na=False)]
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(product_rows)}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    product_data = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    for index, row in product_rows.iterrows():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            nomenclature = str(row[0])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            initial_balance = pd.to_numeric(row[4], errors='coerce')
            incoming = pd.to_numeric(row[6], errors='coerce')
            outgoing = pd.to_numeric(row[7], errors='coerce')
            final_balance = pd.to_numeric(row[8], errors='coerce')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if pd.notna(initial_balance) and pd.notna(final_balance):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ 7 –¥–Ω–µ–π –∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                storage_days = 7
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                product_data.append({
                    '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': nomenclature,
                    '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫': initial_balance,
                    '–ü—Ä–∏—Ö–æ–¥': incoming if pd.notna(incoming) else 0.0,
                    '–†–∞—Å—Ö–æ–¥': outgoing if pd.notna(outgoing) else 0.0,
                    '–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫': final_balance,
                    '–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)': storage_days
                })
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index}: {str(e)}")
            continue
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(product_data)}")
    return product_data

def process_real_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏."""
    print("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    source_data_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if not os.path.exists(source_data_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_data_dir}")
        return
    
    print(f"üìÇ –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {source_data_dir}")
    
    # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –ø—Ä–∏–º–µ—Ä)
    real_data_files = [f for f in os.listdir(source_data_dir) 
                      if f.endswith('.xls') and '–ø—Ä–∏–º–µ—Ä' not in f.lower()]
    
    if not real_data_files:
        print("‚ùå –í –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(real_data_files)}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for data_file in real_data_files:
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {data_file}")
        file_path = os.path.join(source_data_dir, data_file)
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            product_data = extract_product_data_from_real_file(file_path)
            
            if not product_data:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö")
                continue
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            file_results = {
                "source_file": data_file,
                "total_rows": len(product_data),
                "product_types": {},
                "calculations": []
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
            for product in product_data[:10]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                    nomenclature_data = NomenclatureRow(
                        –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞=product['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'],
                        –ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫=product['–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫'],
                        –ü—Ä–∏—Ö–æ–¥=product['–ü—Ä–∏—Ö–æ–¥'],
                        –†–∞—Å—Ö–æ–¥=product['–†–∞—Å—Ö–æ–¥'],
                        –ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫=product['–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫'],
                        –ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π=product['–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)']
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                    product_type = model.determine_product_type(nomenclature_data.name)
                    product_type_desc = {
                        'fish_fresh': '–°–≤–µ–∂–∞—è —Ä—ã–±–∞',
                        'fish_salt_cured': '–°–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è —Ä—ã–±–∞',
                        'fish_cold_smoked': '–•–æ–ª–æ–¥–Ω–æ–µ –∫–æ–ø—á–µ–Ω–∏–µ',
                        'fish_hot_smoked': '–ì–æ—Ä—è—á–µ–µ –∫–æ–ø—á–µ–Ω–∏–µ',
                        'fish_smoked': '–ö–æ–ø—á–µ–Ω–∞—è —Ä—ã–±–∞',
                        'fish_dried': '–°—É—à–µ–Ω–∞—è/–≤—è–ª–µ–Ω–∞—è —Ä—ã–±–∞'
                    }.get(product_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                    if product_type not in file_results["product_types"]:
                        file_results["product_types"][product_type] = {
                            "description": product_type_desc,
                            "count": 0
                        }
                    file_results["product_types"][product_type]["count"] += 1
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
                    adaptation_data = {
                        'initial_balance': nomenclature_data.initial_balance,
                        'incoming': nomenclature_data.incoming,
                        'outgoing': nomenclature_data.outgoing,
                        'final_balance': nomenclature_data.final_balance,
                        'storage_days': nomenclature_data.storage_days
                    }
                    
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                    coefficients = model.adapt_coefficients(
                        adaptation_data, 
                        nomenclature=nomenclature_data.name
                    )
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —É—Å—É—à–∫—É
                    forecast = model.predict_with_adaptation(
                        nomenclature_data.storage_days, 
                        nomenclature=nomenclature_data.name
                    )
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—á–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
                    # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç–∞—á–∞—Ö, 
                    # —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —É—Å—É—à–∫–æ–π
                    inventory_shortage = (nomenclature_data.initial_balance + nomenclature_data.incoming - 
                                        nomenclature_data.outgoing - nomenclature_data.final_balance)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—á, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —É—Å—É—à–∫–æ–π
                    shrinkage_component = model.determine_shrinkage_component(
                        inventory_shortage, 
                        nomenclature_data.initial_balance,
                        nomenclature=nomenclature_data.name
                    )
                    
                    shrinkage_percent = (shrinkage_component / nomenclature_data.initial_balance) * 100 if nomenclature_data.initial_balance > 0 else 0
                    inventory_shortage_percent = (inventory_shortage / nomenclature_data.initial_balance) * 100 if nomenclature_data.initial_balance > 0 else 0
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—É—é —É—Å—É—à–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                    forecast_percent = (forecast / nomenclature_data.initial_balance) * 100 if nomenclature_data.initial_balance > 0 else 0
                    
                    print(f"   {nomenclature_data.name[:20]:20} | –¢–∏–ø: {product_type_desc:15} | "
                          f"–ù–µ–¥–æ—Å—Ç–∞—á–∞: {inventory_shortage_percent:.2f}% | –£—Å—É—à–∫–∞: {shrinkage_percent:.2f}% | –ü—Ä–æ–≥–Ω–æ–∑: {forecast_percent:.2f}%")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    file_results["calculations"].append({
                        "nomenclature": nomenclature_data.name,
                        "product_type": product_type,
                        "product_type_description": product_type_desc,
                        "initial_balance": nomenclature_data.initial_balance,
                        "incoming": nomenclature_data.incoming,
                        "outgoing": nomenclature_data.outgoing,
                        "final_balance": nomenclature_data.final_balance,
                        "storage_days": nomenclature_data.storage_days,
                        "inventory_shortage": inventory_shortage,
                        "inventory_shortage_percent": inventory_shortage_percent,
                        "shrinkage_component": shrinkage_component,
                        "shrinkage_percent": shrinkage_percent,
                        "forecast_shrinkage": forecast,
                        "forecast_shrinkage_percent": forecast_percent,
                        "coefficients": coefficients
                    })
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
            results_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'))
            os.makedirs(results_dir, exist_ok=True)
            
            output_file = os.path.join(results_dir, f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–æ–±—Ä–∞–±–æ—Ç–∫–∏_—Ä–µ–∞–ª—å–Ω—ã—Ö_–¥–∞–Ω–Ω—ã—Ö_{data_file.replace('.xls', '.json')}")
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(file_results, f, ensure_ascii=False, indent=2)
            
            print(f"   üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {data_file}: {str(e)}")
            continue
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    process_real_data()