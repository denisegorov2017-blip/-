#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
"""

import sys
import os
import pandas as pd
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_verification_system import ShrinkageVerificationSystem


def test_verification_with_real_data():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print("üîç –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_system = ShrinkageVerificationSystem()
    
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    test_cases = [
        {
            'name': '–í–Ø–õ–ï–ù–ê–Ø –†–´–ë–ê (–≤–µ—Å–æ–≤–æ–π —Ç–æ–≤–∞—Ä)',
            'initial_balance': 31.950,
            'incoming': 33.078,
            'outgoing': 22.000,
            'final_balance': 43.028,
            'storage_days': 7
        },
        {
            'name': '–í–û–ë–õ–ê –ê–°–¢–†–ê–•–ê–ù–¨ –≤—è–ª–µ–Ω–∞—è',
            'initial_balance': 5.020,
            'incoming': 10.000,
            'outgoing': 9.734,
            'final_balance': 5.286,
            'storage_days': 7
        },
        {
            'name': '–ö–ê–ú–ë–ê–õ–ê –í–Ø–õ –ë–ï–ó –ò–ö–†–´',
            'initial_balance': 2.478,
            'incoming': 2.240,
            'outgoing': 1.402,
            'final_balance': 3.316,
            'storage_days': 7
        }
    ]
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    test_coefficients = {
        'model_type': 'exponential',
        'coefficients': {
            'a': 0.015,  # 1.5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å—É—à–∫–∞
            'b': 0.049,  # –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
            'c': 0.001   # –õ–∏–Ω–µ–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        },
        'r_squared': 0.95  # –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    }
    
    print("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for i, case in enumerate(test_cases):
        theoretical_balance = case['initial_balance'] + case['incoming'] - case['outgoing']
        actual_shrinkage = theoretical_balance - case['final_balance']
        print(f"   {i+1}. {case['name'][:30]:30} | –£—Å—É—à–∫–∞: {actual_shrinkage:8.3f} –∫–≥")
    
    print(f"\nüßÆ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:")
    coeffs = test_coefficients['coefficients']
    print(f"   –ú–æ–¥–µ–ª—å: {test_coefficients['model_type']}")
    print(f"   a = {coeffs['a']:.4f}, b = {coeffs['b']:.4f}, c = {coeffs['c']:.4f}")
    print(f"   R¬≤ = {test_coefficients['r_squared']:.4f}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    for i, case in enumerate(test_cases):
        print(f"\n   –¢–µ—Å—Ç {i+1}: {case['name'][:30]}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        results = verification_system.verify_coefficients_accuracy(case, test_coefficients)
        
        if results['verification_status'] == 'success':
            # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
            metrics = results['accuracy_metrics']
            validation = results['validation_status']
            
            print(f"     –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics['predicted_shrinkage']:8.3f} –∫–≥")
            print(f"     –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞:   {metrics['actual_shrinkage']:8.3f} –∫–≥")
            print(f"     –†–∞–∑–Ω–∏—Ü–∞:              {metrics['difference']:8.3f} –∫–≥")
            print(f"     R¬≤:                   {metrics['r_squared']:8.4f}")
            print(f"     –°—Ç–∞—Ç—É—Å:               {validation['overall_status'].upper()}")
        else:
            print(f"     –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {results.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    print(f"\nüìÑ –ü—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    results = verification_system.verify_coefficients_accuracy(test_cases[0], test_coefficients)
    report = verification_system.generate_verification_report(results)
    print(report)


if __name__ == "__main__":
    test_verification_with_real_data()