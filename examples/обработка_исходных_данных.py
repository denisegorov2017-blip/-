#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏
"""

import sys
import os
import json
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from shrinkage_project.adaptive_shrinkage_calculator import AdaptiveShrinkageModel
from shrinkage_project.data_models import NomenclatureRow

def process_source_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏."""
    print("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    source_data_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if not os.path.exists(source_data_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_data_dir}")
        return
    
    print(f"üìÇ –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {source_data_dir}")
    
    # –ò—â–µ–º Excel —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
    excel_files = [f for f in os.listdir(source_data_dir) if f.endswith('.xlsx')]
    
    if not excel_files:
        print("‚ùå –í –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for excel_file in excel_files:
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {excel_file}")
        file_path = os.path.join(source_data_dir, excel_file)
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path)
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            required_columns = ['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫', '–ü—Ä–∏—Ö–æ–¥', '–†–∞—Å—Ö–æ–¥', '–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫', '–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_columns}")
                continue
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            file_results = {
                "source_file": excel_file,
                "total_rows": len(df),
                "product_types": {},
                "calculations": []
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            for index, row in df.iterrows():
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                    nomenclature_data = NomenclatureRow(
                        –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞=row['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'],
                        –ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫=row['–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫'],
                        –ü—Ä–∏—Ö–æ–¥=row['–ü—Ä–∏—Ö–æ–¥'],
                        –†–∞—Å—Ö–æ–¥=row['–†–∞—Å—Ö–æ–¥'],
                        –ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫=row['–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫'],
                        –ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π=row['–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)']
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                    product_type = model.determine_product_type(nomenclature_data.name)
                    product_type_desc = {
                        'fish_fresh': '–°–≤–µ–∂–∞—è —Ä—ã–±–∞',
                        'fish_salt_cured': '–°–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è —Ä—ã–±–∞',
                        'fish_cold_smoked': '–•–æ–ª–æ–¥–Ω–æ–µ –∫–æ–ø—á–µ–Ω–∏–µ',
                        'fish_hot_smoked': '–ì–æ—Ä—è—á–µ–µ –∫–æ–ø—á–µ–Ω–∏–µ',
                        'fish_smoked': '–ö–æ–ø—á–µ–Ω–∞—è —Ä—ã–±–∞',
                        'fish_dried': '–°—É—à–µ–Ω–∞—è/–≤—è–ª–µ–Ω–∞—è —Ä—ã–±–∞'
                    }.get(product_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                    if product_type not in file_results["product_types"]:
                        file_results["product_types"][product_type] = {
                            "description": product_type_desc,
                            "count": 0
                        }
                    file_results["product_types"][product_type]["count"] += 1
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
                    adaptation_data = {
                        'initial_balance': nomenclature_data.initial_balance,
                        'incoming': nomenclature_data.incoming,
                        'outgoing': nomenclature_data.outgoing,
                        'final_balance': nomenclature_data.final_balance,
                        'storage_days': nomenclature_data.storage_days
                    }
                    
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                    coefficients = model.adapt_coefficients(
                        adaptation_data, 
                        nomenclature=nomenclature_data.name
                    )
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —É—Å—É—à–∫—É
                    forecast = model.predict_with_adaptation(
                        nomenclature_data.storage_days, 
                        nomenclature=nomenclature_data.name
                    )
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —É—Å—É—à–∫—É
                    actual_shrinkage = (nomenclature_data.initial_balance + nomenclature_data.incoming - 
                                      nomenclature_data.outgoing - nomenclature_data.final_balance)
                    actual_shrinkage_percent = (actual_shrinkage / nomenclature_data.initial_balance) * 100 if nomenclature_data.initial_balance > 0 else 0
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—É—é —É—Å—É—à–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                    forecast_percent = (forecast / nomenclature_data.initial_balance) * 100 if nomenclature_data.initial_balance > 0 else 0
                    
                    print(f"   {nomenclature_data.name:20} | –¢–∏–ø: {product_type_desc:15} | "
                          f"–§–∞–∫—Ç: {actual_shrinkage_percent:.2f}% | –ü—Ä–æ–≥–Ω–æ–∑: {forecast_percent:.2f}%")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    file_results["calculations"].append({
                        "nomenclature": nomenclature_data.name,
                        "product_type": product_type,
                        "product_type_description": product_type_desc,
                        "initial_balance": nomenclature_data.initial_balance,
                        "incoming": nomenclature_data.incoming,
                        "outgoing": nomenclature_data.outgoing,
                        "final_balance": nomenclature_data.final_balance,
                        "storage_days": nomenclature_data.storage_days,
                        "actual_shrinkage": actual_shrinkage,
                        "actual_shrinkage_percent": actual_shrinkage_percent,
                        "forecast_shrinkage": forecast,
                        "forecast_shrinkage_percent": forecast_percent,
                        "coefficients": coefficients
                    })
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {str(e)}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
            results_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'))
            os.makedirs(results_dir, exist_ok=True)
            
            output_file = os.path.join(results_dir, f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–æ–±—Ä–∞–±–æ—Ç–∫–∏_{excel_file.replace('.xlsx', '.json')}")
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(file_results, f, ensure_ascii=False, indent=2)
            
            print(f"   üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {excel_file}: {str(e)}")
            continue
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    process_source_data()