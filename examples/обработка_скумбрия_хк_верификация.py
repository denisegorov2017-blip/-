#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –°–ö–£–ú–ë–†–ò–Ø –•/–ö —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
–ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ "–°–ö–£–ú–ë–†–ò–Ø –•/–ö" —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ 
—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.
"""

import sys
import os
import pandas as pd
import json
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_system import ShrinkageSystem
from core.shrinkage_verification_system import ShrinkageVerificationSystem


def process_scomber_data_with_verification():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –°–ö–£–ú–ë–†–ò–Ø –•/–ö —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤."""
    print("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –°–ö–£–ú–ë–†–ò–Ø –•/–ö —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Å—É—à–∫–∏
    system = ShrinkageSystem()
    system.config['enable_verification'] = True
    system.config['use_adaptive_model'] = True
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ –°–ö–£–ú–ë–†–ò–Ø –•/–ö –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    # –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: 11.412 –∫–≥
    # –ü—Ä–∏—Ö–æ–¥: 9.070 –∫–≥
    # –†–∞—Å—Ö–æ–¥: 14.504 –∫–≥
    # –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: 5.978 –∫–≥
    # –ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è: 6 –¥–Ω–µ–π (—Å 15.07.2025 –ø–æ 21.07.2025)
    
    product_data = [{
        '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': '–°–ö–£–ú–ë–†–ò–Ø –•/–ö',
        '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': 11.412,
        '–ü—Ä–∏—Ö–æ–¥': 9.070,
        '–†–∞—Å—Ö–æ–¥': 14.504,
        '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': 5.978,
        '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π': 6
    }]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    dataset = pd.DataFrame(product_data)
    
    print("üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: –°–ö–£–ú–ë–†–ò–Ø –•/–ö")
    print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: 11.412 –∫–≥")
    print(f"   –ü—Ä–∏—Ö–æ–¥: 9.070 –∫–≥")
    print(f"   –†–∞—Å—Ö–æ–¥: 14.504 –∫–≥")
    print(f"   –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: 5.978 –∫–≥")
    print(f"   –ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è: 6 –¥–Ω–µ–π")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —É—Å—É—à–∫—É
    initial_balance = 11.412
    incoming = 9.070
    outgoing = 14.504
    final_balance = 5.978
    
    theoretical_balance = initial_balance + incoming - outgoing
    actual_shrinkage = theoretical_balance - final_balance
    
    print(f"\nüßÆ –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —É—Å—É—à–∫–∏:")
    print(f"   –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: {initial_balance} + {incoming} - {outgoing} = {theoretical_balance:.3f} –∫–≥")
    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {theoretical_balance:.3f} - {final_balance} = {actual_shrinkage:.3f} –∫–≥")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"\nüßÆ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏...")
    results = system.process_dataset(
        dataset=dataset,
        source_filename="–°–ö–£–ú–ë–†–ò–Ø_–•–ö_–¥–∞–Ω–Ω—ã–µ.xlsx",
        use_adaptive=True
    )
    
    if results['status'] != 'success':
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    coefficients = results.get('coefficients', [])
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:")
    
    if coefficients:
        coeff = coefficients[0]
        nomenclature = coeff.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')
        accuracy = coeff.get('–¢–æ—á–Ω–æ—Å—Ç—å_R2', 0)
        model = coeff.get('–ú–æ–¥–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
        a_coeff = coeff.get('a', 0)
        b_coeff = coeff.get('b', 0)
        c_coeff = coeff.get('c', 0)
        
        print(f"   –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: {nomenclature}")
        print(f"   –ú–æ–¥–µ–ª—å: {model}")
        print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: a={a_coeff:.6f}, b={b_coeff:.6f}, c={c_coeff:.6f}")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å (R¬≤): {accuracy:.2f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        verification_data = coeff.get('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', {})
        if verification_data:
            verification_status = verification_data.get('verification_status', 'unknown')
            if verification_status == 'success':
                metrics = verification_data.get('accuracy_metrics', {})
                validation = verification_data.get('validation_status', {})
                overall_status = validation.get('overall_status', 'unknown')
                
                print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                print(f"   –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_status.upper()}")
                print(f"   –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {overall_status.upper()}")
                print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics.get('predicted_shrinkage', 0):.3f} –∫–≥")
                print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {metrics.get('actual_shrinkage', 0):.3f} –∫–≥")
                print(f"   R¬≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {metrics.get('r_squared', 0):.4f}")
                print(f"   –†–∞–∑–Ω–∏—Ü–∞: {metrics.get('difference', 0):.4f} –∫–≥")
            else:
                print(f"   –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_status.upper()}")
                error_msg = verification_data.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"   –û—à–∏–±–∫–∞: {error_msg}")
        else:
            print("   –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–ï–¢ –î–ê–ù–ù–´–•")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é ShrinkageVerificationSystem
    print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é ShrinkageVerificationSystem...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_system = ShrinkageVerificationSystem()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    original_data = {
        'name': '–°–ö–£–ú–ë–†–ò–Ø –•/–ö',
        'initial_balance': initial_balance,
        'incoming': incoming,
        'outgoing': outgoing,
        'final_balance': final_balance,
        'storage_days': 6
    }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_coefficients = {
        'model_type': model,
        'coefficients': {
            'a': a_coeff,
            'b': b_coeff,
            'c': c_coeff
        },
        'r_squared': accuracy / 100.0  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    verification_results = verification_system.verify_coefficients_accuracy(
        original_data, verification_coefficients
    )
    
    if verification_results['verification_status'] == 'success':
        metrics = verification_results['accuracy_metrics']
        validation = verification_results['validation_status']
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics['predicted_shrinkage']:.3f} –∫–≥")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {metrics['actual_shrinkage']:.3f} –∫–≥")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞: {metrics['difference']:.4f} –∫–≥")
        print(f"   R¬≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {metrics['r_squared']:.4f}")
        print(f"   –°—Ç–∞—Ç—É—Å: {validation['overall_status'].upper()}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = verification_system.generate_verification_report(verification_results)
        print(f"\nüìÑ –û—Ç—á–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        output_dir = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        os.makedirs(output_dir, exist_ok=True)
        report_file = os.path.join(output_dir, "–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è_–°–ö–£–ú–ë–†–ò–Ø_–•–ö_–ø–æ–¥—Ä–æ–±–Ω–∞—è.txt")
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        print(f"\nüíæ –û—Ç—á–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_results.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    output_dir = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    os.makedirs(output_dir, exist_ok=True)
    
    coefficients_file = os.path.join(output_dir, "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã_—É—Å—É—à–∫–∏_–°–ö–£–ú–ë–†–ò–Ø_–•–ö_—Å_–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.json")
    with open(coefficients_file, 'w', encoding='utf-8') as f:
        json.dump(coefficients, f, ensure_ascii=False, indent=2)
    print(f"\nüíæ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {coefficients_file}")
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –°–ö–£–ú–ë–†–ò–Ø –•/–ö —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    process_scomber_data_with_verification()