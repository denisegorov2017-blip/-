#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ—á–Ω–æ—Å—Ç–∏ 
—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏.
"""

import sys
import os
import pandas as pd
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_system import ShrinkageSystem
from core.data_processor import DataProcessor
from core.shrinkage_verification_system import ShrinkageVerificationSystem


def process_real_file_with_verification(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏."""
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Å—É—à–∫–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        system = ShrinkageSystem()
        # –í–∫–ª—é—á–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        system.config['enable_verification'] = True
        system.config['use_adaptive_model'] = True
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å—É—à–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª Excel
        print("üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel...")
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        df_raw = pd.read_excel(file_path, header=None)
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df_raw.shape[0]} —Å—Ç—Ä–æ–∫, {df_raw.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–±–µ)
        product_rows = df_raw[
            df_raw[0].str.contains('–†–´–ë–ê|–°–ï–õ–¨–î–¨|–°–ö–£–ú–ë–†–ò–Ø|–©–£–ö–ê|–û–ö–£–ù–¨|–ì–û–†–ë–£–®–ê|–ö–ï–¢–ê|–°–ï–ú–ì–ê|–§–û–†–ï–õ–¨|–ò–ö–†–ê|–ö–†–ï–í–ï–¢–ö–ò|–ú–ê–°–õ–ï–ù–ê–Ø|–ù–ï–†–ö–ê|–ú–û–ô–í–ê|–Æ–ö–û–õ–ê|–í–û–ú–ï–†|–ë–†–Æ–®–ö–ò|–ö–û–†–Æ–®–ö–ê|–õ–ï–©|–°–ò–ì|–î–û–†–ê–î–û|–ë–ï–õ–û–†–´–ë–ò–¶–ê|–¢–ê–†–ê–ù–¨|–ß–ï–•–û–ù–¨|–ü–ï–õ–Ø–î–¨|–í–û–ë–õ–ê|–ö–ê–ú–ë–ê–õ–ê|–•/–ö|–ì/–ö|–°/–°', case=False, na=False) & 
            ~df_raw[0].str.contains('–í–µ–¥–æ–º–æ—Å—Ç—å|–ü–∞—Ä–∞–º–µ—Ç—Ä—ã|–û—Ç–±–æ—Ä|–°–∫–ª–∞–¥|–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞|–î–æ–∫—É–º–µ–Ω—Ç|–ü–∞—Ä—Ç–∏—è|–û—Ç—á–µ—Ç|–ü—Ä–∏—Ö–æ–¥–Ω–∞—è|–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è|–ú–æ–Ω–µ—Ç–∫–∞ —Ä—ã–±–∞', case=False, na=False)
        ]
        
        print(f"üêü –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(product_rows)}")
        
        if len(product_rows) == 0:
            print("‚ö†Ô∏è  –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞...")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            numeric_rows = df_raw.dropna(subset=[4, 6, 7, 8], how='all')
            if len(numeric_rows) > 0:
                product_rows = numeric_rows.head(20)  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                print(f"üî¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ {len(product_rows)} —Å—Ç—Ä–æ–∫ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        if len(product_rows) == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        product_data = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        for index, row in product_rows.iterrows():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
                nomenclature = str(row.iloc[0]) if len(row) > 0 else f"–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_{index}"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
                # –°—Ç–æ–ª–±—Ü—ã: 0-–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, 4-–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫, 6-–ü—Ä–∏—Ö–æ–¥, 7-–†–∞—Å—Ö–æ–¥, 8-–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                initial_balance = pd.to_numeric(row.iloc[4], errors='coerce') if len(row) > 4 else 0.0
                incoming = pd.to_numeric(row.iloc[6], errors='coerce') if len(row) > 6 else 0.0
                outgoing = pd.to_numeric(row.iloc[7], errors='coerce') if len(row) > 7 else 0.0
                final_balance = pd.to_numeric(row.iloc[8], errors='coerce') if len(row) > 8 else 0.0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if pd.notna(initial_balance) and pd.notna(final_balance):
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ 7 –¥–Ω–µ–π –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
                    storage_days = 7
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                    product_data.append({
                        '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': nomenclature,
                        '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': initial_balance,
                        '–ü—Ä–∏—Ö–æ–¥': incoming if pd.notna(incoming) else 0.0,
                        '–†–∞—Å—Ö–æ–¥': outgoing if pd.notna(outgoing) else 0.0,
                        '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': final_balance,
                        '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π': storage_days
                    })
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index}: {str(e)}")
                continue
        
        if len(product_data) == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö")
            return
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(product_data)}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        dataset = pd.DataFrame(product_data)
        print("\nüìä –ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(dataset.head().to_string())
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        print("\nüßÆ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
        results = system.process_dataset(
            dataset=dataset,
            source_filename=os.path.basename(file_path),
            use_adaptive=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results['status'] != 'success':
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        summary = results.get('summary', {})
        print(f"\nüìà –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: {summary.get('total_nomenclatures', 0)}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {summary.get('avg_accuracy', 0):.2f}%")
        print(f"   –û—à–∏–±–æ–∫: {summary.get('error_count', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        coefficients = results.get('coefficients', [])
        print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        for i, coeff in enumerate(coefficients[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            nomenclature = coeff.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')
            accuracy = coeff.get('–¢–æ—á–Ω–æ—Å—Ç—å_R2', 0)
            verification = coeff.get('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', {})
            
            if verification:
                verification_status = verification.get('verification_status', 'unknown')
                validation_status = verification.get('validation_status', {})
                overall_status = validation_status.get('overall_status', 'unknown')
                
                print(f"   {i+1}. {nomenclature[:30]:30} | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:6.2f}% | –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {overall_status.upper()}")
            else:
                print(f"   {i+1}. {nomenclature[:30]:30} | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:6.2f}% | –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–ï–¢ –î–ê–ù–ù–´–•")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_dir = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        os.makedirs(output_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ JSON
        coefficients_file = os.path.join(output_dir, f"–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã_—É—Å—É—à–∫–∏_{os.path.splitext(os.path.basename(file_path))[0]}_–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è.json")
        with open(coefficients_file, 'w', encoding='utf-8') as f:
            json.dump(coefficients, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {coefficients_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç—ã
        reports = results.get('reports', {})
        for report_name, report_content in reports.items():
            report_file = os.path.join(output_dir, f"{report_name}_–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è.html")
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(report_content)
            print(f"üíæ –û—Ç—á–µ—Ç '{report_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    file_path = r"C:\Users\D_909\Desktop\–¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ\–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ\b3ded820-4385-4a42-abc7-75dc0756d335_6ba7ac50-fb1a-4bea-9489-265bdfdcb8d1_–≤—Å—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 15.07.25 –ø–æ 21.07.25.xls"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
    process_real_file_with_verification(file_path)