#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ "–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï" –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç
–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ "–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï" –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è.
"""

import sys
import os
import pandas as pd
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))


def analyze_file_structure():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    file_path = r"C:\Users\D_909\Desktop\–¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ\–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ\b3ded820-4385-4a42-abc7-75dc0756d335_6ba7ac50-fb1a-4bea-9489-265bdfdcb8d1_–≤—Å—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 15.07.25 –ø–æ 21.07.25.xls"
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    
    try:
        # 1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        df_raw = pd.read_excel(file_path, header=None)
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {df_raw.shape[0]} —Å—Ç—Ä–æ–∫, {df_raw.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # 2. –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 15 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print(f"\nüìã –ü–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:")
        print(df_raw.head(15).to_string())
        
        # 3. –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        print(f"\nüîç –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
        header_row = None
        for i, row in df_raw.iterrows():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            row_str = ' '.join([str(cell) for cell in row if pd.notna(cell)])
            if any(keyword in row_str.lower() for keyword in ['–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–¥—É–∫—Ç']):
                header_row = i
                print(f"üéØ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ {i}: {row_str[:100]}...")
                break
        
        # 4. –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞–º–∏ —Ä—ã–±—ã
        print(f"\nüîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å —Ä—ã–±–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π...")
        fish_keywords = ['–†–´–ë–ê', '–°–ï–õ–¨–î–¨', '–°–ö–£–ú–ë–†–ò–Ø', '–©–£–ö–ê', '–û–ö–£–ù–¨', '–ì–û–†–ë–£–®–ê', '–ö–ï–¢–ê', '–°–ï–ú–ì–ê', 
                        '–§–û–†–ï–õ–¨', '–ò–ö–†–ê', '–ö–†–ï–í–ï–¢–ö–ò', '–ú–ê–°–õ–ï–ù–ê–Ø', '–ù–ï–†–ö–ê', '–ú–û–ô–í–ê', '–Æ–ö–û–õ–ê', '–í–û–ú–ï–†',
                        '–ë–†–Æ–®–ö–ò', '–ö–û–†–Æ–®–ö–ê', '–õ–ï–©', '–°–ò–ì', '–î–û–†–ê–î–û', '–ë–ï–õ–û–†–´–ë–ò–¶–ê', '–¢–ê–†–ê–ù–¨', '–ß–ï–•–û–ù–¨',
                        '–ü–ï–õ–Ø–î–¨', '–í–û–ë–õ–ê', '–ö–ê–ú–ë–ê–õ–ê', '–•/–ö', '–ì/–ö', '–°/–°', '–í–Ø–õ–ï–ù', '–ë–´–ß–ö–ò']
        
        product_mask = df_raw[0].astype(str).str.contains('|'.join(fish_keywords), case=False, na=False)
        product_rows = df_raw[product_mask]
        
        print(f"üêü –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å —Ä—ã–±–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π: {len(product_rows)}")
        
        # 5. –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ "–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï"
        scomber_mask = df_raw[0].astype(str).str.contains('–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï', case=False, na=False)
        scomber_rows = df_raw[scomber_mask]
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å '–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï': {len(scomber_rows)}")
        
        if len(scomber_rows) > 0:
            print(f"\nüìÑ –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–æ–∫ —Å '–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï':")
            for idx, row in scomber_rows.iterrows():
                print(f"   –°—Ç—Ä–æ–∫–∞ {idx}:")
                for col_idx, cell in enumerate(row):
                    if pd.notna(cell):
                        print(f"     –°—Ç–æ–ª–±–µ—Ü {col_idx}: {cell}")
                print()
        
        return df_raw, scomber_rows
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return None, None


def extract_scomber_data(df_raw, scomber_rows):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ '–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï'."""
    print("üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ '–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï'")
    print("=" * 60)
    
    if len(scomber_rows) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
        return []
    
    product_data = []
    
    for index, row in scomber_rows.iterrows():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            nomenclature = str(row.iloc[0]) if len(row) > 0 else f"–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_{index}"
            
            print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {index}: {nomenclature}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            # –°—Ç–æ–ª–±–µ—Ü 4 - –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
            # –°—Ç–æ–ª–±–µ—Ü 6 - –ü—Ä–∏—Ö–æ–¥
            # –°—Ç–æ–ª–±–µ—Ü 7 - –†–∞—Å—Ö–æ–¥
            # –°—Ç–æ–ª–±–µ—Ü 8 - –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
            
            initial_balance = pd.to_numeric(row.iloc[4], errors='coerce') if len(row) > 4 else None
            incoming = pd.to_numeric(row.iloc[6], errors='coerce') if len(row) > 6 else None
            outgoing = pd.to_numeric(row.iloc[7], errors='coerce') if len(row) > 7 else None
            final_balance = pd.to_numeric(row.iloc[8], errors='coerce') if len(row) > 8 else None
            
            print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {initial_balance}")
            print(f"   –ü—Ä–∏—Ö–æ–¥: {incoming}")
            print(f"   –†–∞—Å—Ö–æ–¥: {outgoing}")
            print(f"   –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {final_balance}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if all(pd.notna(val) for val in [initial_balance, final_balance]):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —É—Å—É—à–∫—É
                theoretical_balance = initial_balance + (incoming if pd.notna(incoming) else 0) - (outgoing if pd.notna(outgoing) else 0)
                actual_shrinkage = theoretical_balance - final_balance
                
                print(f"   –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: {theoretical_balance:.3f}")
                print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {actual_shrinkage:.3f}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                product_data.append({
                    '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': nomenclature,
                    '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': float(initial_balance),
                    '–ü—Ä–∏—Ö–æ–¥': float(incoming) if pd.notna(incoming) else 0.0,
                    '–†–∞—Å—Ö–æ–¥': float(outgoing) if pd.notna(outgoing) else 0.0,
                    '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': float(final_balance),
                    '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è_—É—Å—É—à–∫–∞': max(0, float(actual_shrinkage)),  # –£—Å—É—à–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
                    '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π': 7  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                })
                
                print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            else:
                print("   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index}: {str(e)}")
            continue
    
    return product_data


def save_analysis_results(product_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."""
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
    print("=" * 60)
    
    if len(product_data) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    os.makedirs(output_dir, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
    results_file = os.path.join(output_dir, "–∞–Ω–∞–ª–∏–∑_–ë–´–ß–ö–ò_–í–Ø–õ–ï–ù–´–ï.json")
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(product_data, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print(f"\nüìä –°–≤–æ–¥–∫–∞ –ø–æ '–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï':")
    for i, data in enumerate(product_data):
        print(f"   {i+1}. {data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']}")
        print(f"      –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {data['–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫']:.3f} –∫–≥")
        print(f"      –ü—Ä–∏—Ö–æ–¥: {data['–ü—Ä–∏—Ö–æ–¥']:.3f} –∫–≥")
        print(f"      –†–∞—Å—Ö–æ–¥: {data['–†–∞—Å—Ö–æ–¥']:.3f} –∫–≥")
        print(f"      –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {data['–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫']:.3f} –∫–≥")
        print(f"      –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {data['–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è_—É—Å—É—à–∫–∞']:.3f} –∫–≥")
        print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ '–ë–´–ß–ö–ò –í–Ø–õ–ï–ù–´–ï'")
    print("=" * 70)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
    df_raw, scomber_rows = analyze_file_structure()
    
    if df_raw is None:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    product_data = extract_scomber_data(df_raw, scomber_rows)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_analysis_results(product_data)
    
    print("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    main()