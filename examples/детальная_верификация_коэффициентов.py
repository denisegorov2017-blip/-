#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
"""

import sys
import os
import pandas as pd
import json
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_system import ShrinkageSystem
from core.shrinkage_verification_system import ShrinkageVerificationSystem
from core.shrinkage_calculator import ShrinkageCalculator


def detailed_analysis(file_path):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤."""
    print(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    print("=" * 70)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    df = pd.read_excel(file_path, header=None)
    
    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    header_row = None
    for i, row in df.iterrows():
        if '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞' in str(row.iloc[0]) and '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫' in str(row.iloc[4]):
            header_row = i
            break
    
    if header_row is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ")
        return
    
    print(f"üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ {header_row}")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df_data = pd.read_excel(file_path, header=header_row)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    keywords = ['–†–´–ë–ê', '–°–ï–õ–¨–î–¨', '–°–ö–£–ú–ë–†–ò–Ø', '–©–£–ö–ê', '–û–ö–£–ù–¨', '–ì–û–†–ë–£–®–ê', '–ö–ï–¢–ê', '–°–ï–ú–ì–ê', 
                '–§–û–†–ï–õ–¨', '–ò–ö–†–ê', '–ö–†–ï–í–ï–¢–ö–ò', '–ú–ê–°–õ–ï–ù–ê–Ø', '–ù–ï–†–ö–ê', '–ú–û–ô–í–ê', '–Æ–ö–û–õ–ê', '–í–û–ú–ï–†',
                '–ë–†–Æ–®–ö–ò', '–ö–û–†–Æ–®–ö–ê', '–õ–ï–©', '–°–ò–ì', '–î–û–†–ê–î–û', '–ë–ï–õ–û–†–´–ë–ò–¶–ê', '–¢–ê–†–ê–ù–¨', '–ß–ï–•–û–ù–¨',
                '–ü–ï–õ–Ø–î–¨', '–í–û–ë–õ–ê', '–ö–ê–ú–ë–ê–õ–ê', '–•/–ö', '–ì/–ö', '–°/–°', '–í–Ø–õ–ï–ù']
    
    product_mask = df_data.iloc[:, 0].astype(str).str.contains('|'.join(keywords), case=False, na=False)
    product_data = df_data[product_mask]
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(product_data)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
    significant_shrinkage = 0
    zero_shrinkage = 0
    total_records = 0
    
    sample_data = []
    
    for index, row in product_data.iterrows():
        try:
            nomenclature = str(row.iloc[0])
            initial_balance = pd.to_numeric(row.iloc[4], errors='coerce')
            incoming = pd.to_numeric(row.iloc[6], errors='coerce')
            outgoing = pd.to_numeric(row.iloc[7], errors='coerce')
            final_balance = pd.to_numeric(row.iloc[8], errors='coerce')
            
            if pd.notna(initial_balance) and pd.notna(incoming) and pd.notna(outgoing) and pd.notna(final_balance):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —É—Å—É—à–∫—É
                theoretical_balance = initial_balance + incoming - outgoing
                actual_shrinkage = theoretical_balance - final_balance
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —É—Å—É—à–∫–∏
                if abs(actual_shrinkage) > 0.001:  # –ó–Ω–∞—á–∏–º–∞—è —É—Å—É—à–∫–∞ (> 1 –≥—Ä–∞–º–º–∞)
                    significant_shrinkage += 1
                else:
                    zero_shrinkage += 1
                
                total_records += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if len(sample_data) < 10:
                    sample_data.append({
                        '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': nomenclature,
                        '–ù–∞—á–∞–ª—å–Ω—ã–π': initial_balance,
                        '–ü—Ä–∏—Ö–æ–¥': incoming,
                        '–†–∞—Å—Ö–æ–¥': outgoing,
                        '–ö–æ–Ω–µ—á–Ω—ã–π': final_balance,
                        '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π': theoretical_balance,
                        '–£—Å—É—à–∫–∞': actual_shrinkage
                    })
        except Exception as e:
            continue
    
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
    print(f"   –° –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π: {significant_shrinkage}")
    print(f"   –° –Ω—É–ª–µ–≤–æ–π —É—Å—É—à–∫–æ–π: {zero_shrinkage}")
    
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    for i, data in enumerate(sample_data):
        print(f"   {i+1}. {data['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'][:30]:30} | –£—Å—É—à–∫–∞: {data['–£—Å—É—à–∫–∞']:8.3f} –∫–≥")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Å—É—à–∫–∏
    system = ShrinkageSystem()
    system.config['enable_verification'] = True
    system.config['use_adaptive_model'] = True
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —Å –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π)
    if significant_shrinkage > 0:
        print(f"\nüéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π...")
        
        processed_data = []
        for index, row in product_data.iterrows():
            try:
                nomenclature = str(row.iloc[0])
                initial_balance = pd.to_numeric(row.iloc[4], errors='coerce')
                incoming = pd.to_numeric(row.iloc[6], errors='coerce')
                outgoing = pd.to_numeric(row.iloc[7], errors='coerce')
                final_balance = pd.to_numeric(row.iloc[8], errors='coerce')
                
                if pd.notna(initial_balance) and pd.notna(incoming) and pd.notna(outgoing) and pd.notna(final_balance):
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —É—Å—É—à–∫—É
                    theoretical_balance = initial_balance + incoming - outgoing
                    actual_shrinkage = theoretical_balance - final_balance
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π
                    if abs(actual_shrinkage) > 0.001:
                        processed_data.append({
                            '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': nomenclature,
                            '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': initial_balance,
                            '–ü—Ä–∏—Ö–æ–¥': incoming,
                            '–†–∞—Å—Ö–æ–¥': outgoing,
                            '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': final_balance,
                            '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π': 7
                        })
            except Exception as e:
                continue
        
        if len(processed_data) > 0:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            dataset = pd.DataFrame(processed_data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            results = system.process_dataset(
                dataset=dataset,
                source_filename=os.path.basename(file_path),
                use_adaptive=True
            )
            
            if results['status'] == 'success':
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                coefficients = results.get('coefficients', [])
                print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({len(coefficients)} –∑–∞–ø–∏—Å–µ–π):")
                
                verification_passed = 0
                verification_warning = 0
                verification_critical = 0
                
                for i, coeff in enumerate(coefficients):
                    nomenclature = coeff.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')
                    accuracy = coeff.get('–¢–æ—á–Ω–æ—Å—Ç—å_R2', 0)
                    verification = coeff.get('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', {})
                    
                    if verification:
                        verification_status = verification.get('verification_status', 'unknown')
                        validation_status = verification.get('validation_status', {})
                        overall_status = validation_status.get('overall_status', 'unknown')
                        
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
                        if overall_status == 'acceptable':
                            verification_passed += 1
                        elif overall_status == 'warning':
                            verification_warning += 1
                        elif overall_status == 'critical':
                            verification_critical += 1
                        
                        print(f"   {i+1:2d}. {nomenclature[:35]:35} | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:6.2f}% | –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {overall_status.upper()}")
                    else:
                        print(f"   {i+1:2d}. {nomenclature[:35]:35} | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:6.2f}% | –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–ï–¢ –î–ê–ù–ù–´–•")
                
                print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                print(f"   –£—Å–ø–µ—à–Ω–æ: {verification_passed}")
                print(f"   –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {verification_warning}")
                print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {verification_critical}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                output_dir = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                os.makedirs(output_dir, exist_ok=True)
                
                coefficients_file = os.path.join(output_dir, f"–¥–µ—Ç–∞–ª—å–Ω—ã–µ_–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã_—É—Å—É—à–∫–∏_{os.path.splitext(os.path.basename(file_path))[0]}.json")
                with open(coefficients_file, 'w', encoding='utf-8') as f:
                    json.dump(coefficients, f, ensure_ascii=False, indent=2)
                print(f"\nüíæ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {coefficients_file}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–∏–º–∞—è —É—Å—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print(f"\nüß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_system = ShrinkageVerificationSystem()
        
        # –ü—Ä–∏–º–µ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —É—Å—É—à–∫–æ–π
        synthetic_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
            'initial_balance': 100.0,
            'incoming': 50.0,
            'outgoing': 30.0,
            'final_balance': 118.0,  # –£—Å—É—à–∫–∞ 2.0 –∫–≥
            'storage_days': 7
        }
        
        # –ü—Ä–∏–º–µ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        synthetic_coefficients = {
            'model_type': 'exponential',
            'coefficients': {
                'a': 0.02,   # 2% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å—É—à–∫–∞
                'b': 0.05,   # –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
                'c': 0.001   # –õ–∏–Ω–µ–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            },
            'r_squared': 0.92
        }
        
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"     –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {synthetic_data['initial_balance']} –∫–≥")
        print(f"     –ü—Ä–∏—Ö–æ–¥: {synthetic_data['incoming']} –∫–≥")
        print(f"     –†–∞—Å—Ö–æ–¥: {synthetic_data['outgoing']} –∫–≥")
        print(f"     –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {synthetic_data['final_balance']} –∫–≥")
        print(f"     –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: 2.000 –∫–≥")
        
        print(f"\n   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:")
        coeffs = synthetic_coefficients['coefficients']
        print(f"     a = {coeffs['a']:.4f}, b = {coeffs['b']:.4f}, c = {coeffs['c']:.4f}")
        print(f"     R¬≤ = {synthetic_coefficients['r_squared']:.4f}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        verification_results = verification_system.verify_coefficients_accuracy(synthetic_data, synthetic_coefficients)
        
        if verification_results['verification_status'] == 'success':
            metrics = verification_results['accuracy_metrics']
            validation = verification_results['validation_status']
            
            print(f"\n   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            print(f"     –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics['predicted_shrinkage']:8.3f} –∫–≥")
            print(f"     –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞:   {metrics['actual_shrinkage']:8.3f} –∫–≥")
            print(f"     R¬≤:                   {metrics['r_squared']:8.4f}")
            print(f"     –°—Ç–∞—Ç—É—Å:               {validation['overall_status'].upper()}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = verification_system.generate_verification_report(verification_results)
            print(f"\nüìÑ –û—Ç—á–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            print(report)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    file_path = r"C:\Users\D_909\Desktop\–¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ\–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ\b3ded820-4385-4a42-abc7-75dc0756d335_6ba7ac50-fb1a-4bea-9489-265bdfdcb8d1_–≤—Å—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 15.07.25 –ø–æ 21.07.25.xls"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    detailed_analysis(file_path)


if __name__ == "__main__":
    main()