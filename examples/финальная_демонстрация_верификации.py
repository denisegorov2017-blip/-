#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏
—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
"""

import sys
import os
import pandas as pd
import json
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_system import ShrinkageSystem
from core.shrinkage_verification_system import ShrinkageVerificationSystem


def demonstrate_real_file_processing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    file_path = r"C:\Users\D_909\Desktop\–¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ\–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ\b3ded820-4385-4a42-abc7-75dc0756d335_6ba7ac50-fb1a-4bea-9489-265bdfdcb8d1_–≤—Å—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 15.07.25 –ø–æ 21.07.25.xls"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {os.path.basename(file_path)}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Å—É—à–∫–∏
    system = ShrinkageSystem()
    system.config['enable_verification'] = True
    system.config['use_adaptive_model'] = True
    
    # –ß–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = pd.read_excel(file_path, header=None)
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        header_row = None
        for i, row in df.iterrows():
            if '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞' in str(row.iloc[0]) and '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫' in str(row.iloc[4]):
                header_row = i
                break
        
        if header_row is not None:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            df_data = pd.read_excel(file_path, header=header_row)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            keywords = ['–†–´–ë–ê', '–°–ï–õ–¨–î–¨', '–°–ö–£–ú–ë–†–ò–Ø', '–©–£–ö–ê', '–û–ö–£–ù–¨', '–ì–û–†–ë–£–®–ê', '–ö–ï–¢–ê', '–°–ï–ú–ì–ê', 
                        '–§–û–†–ï–õ–¨', '–ò–ö–†–ê', '–ö–†–ï–í–ï–¢–ö–ò', '–ú–ê–°–õ–ï–ù–ê–Ø', '–ù–ï–†–ö–ê', '–ú–û–ô–í–ê', '–Æ–ö–û–õ–ê', '–í–û–ú–ï–†',
                        '–ë–†–Æ–®–ö–ò', '–ö–û–†–Æ–®–ö–ê', '–õ–ï–©', '–°–ò–ì', '–î–û–†–ê–î–û', '–ë–ï–õ–û–†–´–ë–ò–¶–ê', '–¢–ê–†–ê–ù–¨', '–ß–ï–•–û–ù–¨',
                        '–ü–ï–õ–Ø–î–¨', '–í–û–ë–õ–ê', '–ö–ê–ú–ë–ê–õ–ê', '–•/–ö', '–ì/–ö', '–°/–°', '–í–Ø–õ–ï–ù']
            
            product_mask = df_data.iloc[:, 0].astype(str).str.contains('|'.join(keywords), case=False, na=False)
            product_data = df_data[product_mask]
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(product_data)}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processed_data = []
            for index, row in product_data.iterrows():
                try:
                    nomenclature = str(row.iloc[0])
                    initial_balance = pd.to_numeric(row.iloc[4], errors='coerce')
                    incoming = pd.to_numeric(row.iloc[6], errors='coerce')
                    outgoing = pd.to_numeric(row.iloc[7], errors='coerce')
                    final_balance = pd.to_numeric(row.iloc[8], errors='coerce')
                    
                    if pd.notna(initial_balance) and pd.notna(incoming) and pd.notna(outgoing) and pd.notna(final_balance):
                        processed_data.append({
                            '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': nomenclature,
                            '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': initial_balance,
                            '–ü—Ä–∏—Ö–æ–¥': incoming,
                            '–†–∞—Å—Ö–æ–¥': outgoing,
                            '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': final_balance,
                            '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π': 7
                        })
                except Exception as e:
                    continue
            
            if processed_data:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                dataset = pd.DataFrame(processed_data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                print(f"üßÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(processed_data)} –∑–∞–ø–∏—Å–µ–π...")
                results = system.process_dataset(
                    dataset=dataset,
                    source_filename=os.path.basename(file_path),
                    use_adaptive=True
                )
                
                if results['status'] == 'success':
                    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
                    coefficients = results.get('coefficients', [])
                    print(f"\nüìà –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä: {len(coefficients)}")
                    
                    # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–Ω–æ—Å—Ç—å
                    total_accuracy = 0
                    valid_count = 0
                    for coeff in coefficients:
                        accuracy = coeff.get('–¢–æ—á–Ω–æ—Å—Ç—å_R2', 0)
                        if accuracy > 0:
                            total_accuracy += accuracy
                            valid_count += 1
                    
                    avg_accuracy = total_accuracy / valid_count if valid_count > 0 else 0
                    print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.2f}%")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                    for i, coeff in enumerate(coefficients[:5]):
                        nomenclature = coeff.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')
                        accuracy = coeff.get('–¢–æ—á–Ω–æ—Å—Ç—å_R2', 0)
                        print(f"   {i+1}. {nomenclature[:40]:40} | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:6.2f}%")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")


def demonstrate_verification_scenarios():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    print("\n\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–¶–ï–ù–ê–†–ò–ï–í –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_system = ShrinkageVerificationSystem()
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–¥–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)
    print(f"\nüéØ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–¥–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    scenario1_data = {
        'name': '–ò–î–ï–ê–õ–¨–ù–ê–Ø –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê',
        'initial_balance': 100.0,
        'incoming': 50.0,
        'outgoing': 30.0,
        'final_balance': 118.5,  # –£—Å—É—à–∫–∞ 1.5 –∫–≥
        'storage_days': 7
    }
    
    scenario1_coefficients = {
        'model_type': 'exponential',
        'coefficients': {
            'a': 0.015,  # 1.5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å—É—à–∫–∞
            'b': 0.05,   # –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
            'c': 0.001   # –õ–∏–Ω–µ–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        },
        'r_squared': 0.98
    }
    
    results1 = verification_system.verify_coefficients_accuracy(scenario1_data, scenario1_coefficients)
    if results1['verification_status'] == 'success':
        metrics1 = results1['accuracy_metrics']
        validation1 = results1['validation_status']
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {metrics1['actual_shrinkage']:8.3f} –∫–≥")
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics1['predicted_shrinkage']:8.3f} –∫–≥")
        print(f"   R¬≤: {metrics1['r_squared']:8.4f}")
        print(f"   –°—Ç–∞—Ç—É—Å: {validation1['overall_status'].upper()}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å
    print(f"\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å")
    scenario2_data = {
        'name': '–°–†–ï–î–ù–Ø–Ø –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê',
        'initial_balance': 200.0,
        'incoming': 100.0,
        'outgoing': 80.0,
        'final_balance': 215.0,  # –£—Å—É—à–∫–∞ 5.0 –∫–≥
        'storage_days': 7
    }
    
    scenario2_coefficients = {
        'model_type': 'exponential',
        'coefficients': {
            'a': 0.025,  # 2.5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å—É—à–∫–∞
            'b': 0.04,   # –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
            'c': 0.002   # –õ–∏–Ω–µ–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        },
        'r_squared': 0.85
    }
    
    results2 = verification_system.verify_coefficients_accuracy(scenario2_data, scenario2_coefficients)
    if results2['verification_status'] == 'success':
        metrics2 = results2['accuracy_metrics']
        validation2 = results2['validation_status']
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {metrics2['actual_shrinkage']:8.3f} –∫–≥")
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics2['predicted_shrinkage']:8.3f} –∫–≥")
        print(f"   R¬≤: {metrics2['r_squared']:8.4f}")
        print(f"   –°—Ç–∞—Ç—É—Å: {validation2['overall_status'].upper()}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    print(f"\n‚ö†Ô∏è  –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
    scenario3_data = {
        'name': '–ù–ò–ó–ö–ê–Ø –¢–û–ß–ù–û–°–¢–¨',
        'initial_balance': 150.0,
        'incoming': 75.0,
        'outgoing': 60.0,
        'final_balance': 160.0,  # –£—Å—É—à–∫–∞ 5.0 –∫–≥
        'storage_days': 7
    }
    
    scenario3_coefficients = {
        'model_type': 'exponential',
        'coefficients': {
            'a': 0.010,  # 1.0% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å—É—à–∫–∞
            'b': 0.03,   # –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
            'c': 0.0005  # –õ–∏–Ω–µ–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        },
        'r_squared': 0.65
    }
    
    results3 = verification_system.verify_coefficients_accuracy(scenario3_data, scenario3_coefficients)
    if results3['verification_status'] == 'success':
        metrics3 = results3['accuracy_metrics']
        validation3 = results3['validation_status']
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {metrics3['actual_shrinkage']:8.3f} –∫–≥")
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics3['predicted_shrinkage']:8.3f} –∫–≥")
        print(f"   R¬≤: {metrics3['r_squared']:8.4f}")
        print(f"   –°—Ç–∞—Ç—É—Å: {validation3['overall_status'].upper()}")


def demonstrate_verification_criteria():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    print("\n\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–†–ò–¢–ï–†–ò–ï–í –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    print(f"üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:")
    print(f"   R¬≤ (–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏):")
    print(f"     - –ü—Ä–∏–µ–º–ª–µ–º—ã–π: > 0.85")
    print(f"     - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π: 0.7 - 0.85")
    print(f"     - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: < 0.7")
    print(f"   RMSE (–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞):")
    print(f"     - –ü—Ä–∏–µ–º–ª–µ–º—ã–π: < 0.05")
    print(f"     - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π: 0.05 - 0.1")
    print(f"     - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: > 0.1")
    print(f"   MAE (–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞):")
    print(f"     - –ü—Ä–∏–µ–º–ª–µ–º—ã–π: < 0.03")
    print(f"     - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π: 0.03 - 0.07")
    print(f"     - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: > 0.07")
    
    # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
    print(f"\nüßÆ –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏:")
    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: 2.000 –∫–≥")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: 1.850 –∫–≥")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞: 0.150 –∫–≥")
    print(f"   R¬≤ = 1 - (SS_res / SS_tot) = 0.9431")
    print(f"   RMSE = ‚àö(Œ£(–ø—Ä–æ–≥–Ω–æ–∑ - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ)¬≤ / n) = 0.0150")
    print(f"   MAE = Œ£|–ø—Ä–æ–≥–Ω–æ–∑ - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ| / n = 0.0150")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –¢–û–ß–ù–û–°–¢–ò –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í –£–°–£–®–ö–ò")
    print("=" * 80)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    demonstrate_real_file_processing()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    demonstrate_verification_scenarios()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    demonstrate_verification_criteria()
    
    print(f"\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"   –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print(f"   —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ'")


if __name__ == "__main__":
    main()