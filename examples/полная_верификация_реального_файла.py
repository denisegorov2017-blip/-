#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º —É—Å—É—à–∫–∏
"""

import sys
import os
import pandas as pd
import json
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_system import ShrinkageSystem
from core.shrinkage_verification_system import ShrinkageVerificationSystem


def calculate_actual_shrinkage(row):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —É—Å—É—à–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏.
    
    Args:
        row: –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–ª–∞–Ω—Å–æ–º
        
    Returns:
        float: –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞
    """
    try:
        initial_balance = float(row['–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫'])
        incoming = float(row['–ü—Ä–∏—Ö–æ–¥'])
        outgoing = float(row['–†–∞—Å—Ö–æ–¥'])
        final_balance = float(row['–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫'])
        
        # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å = –Ω–∞—á–∞–ª—å–Ω—ã–π + –ø—Ä–∏—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥
        theoretical_balance = initial_balance + incoming - outgoing
        
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞ = —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
        actual_shrinkage = theoretical_balance - final_balance
        
        # –£—Å—É—à–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π (—ç—Ç–æ –±—É–¥–µ—Ç –∏–∑–ª–∏—à–µ–∫)
        return max(0, actual_shrinkage)
    except (ValueError, KeyError, TypeError):
        return 0.0


def process_file_with_proper_verification(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π."""
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: {file_path}")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    df = pd.read_excel(file_path, header=None)
    
    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    header_row = None
    for i, row in df.iterrows():
        if '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞' in str(row.iloc[0]) and '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫' in str(row.iloc[4]):
            header_row = i
            break
    
    if header_row is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ")
        return
    
    print(f"üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ {header_row}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df_data = pd.read_excel(file_path, header=header_row)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    keywords = ['–†–´–ë–ê', '–°–ï–õ–¨–î–¨', '–°–ö–£–ú–ë–†–ò–Ø', '–©–£–ö–ê', '–û–ö–£–ù–¨', '–ì–û–†–ë–£–®–ê', '–ö–ï–¢–ê', '–°–ï–ú–ì–ê', 
                '–§–û–†–ï–õ–¨', '–ò–ö–†–ê', '–ö–†–ï–í–ï–¢–ö–ò', '–ú–ê–°–õ–ï–ù–ê–Ø', '–ù–ï–†–ö–ê', '–ú–û–ô–í–ê', '–Æ–ö–û–õ–ê', '–í–û–ú–ï–†',
                '–ë–†–Æ–®–ö–ò', '–ö–û–†–Æ–®–ö–ê', '–õ–ï–©', '–°–ò–ì', '–î–û–†–ê–î–û', '–ë–ï–õ–û–†–´–ë–ò–¶–ê', '–¢–ê–†–ê–ù–¨', '–ß–ï–•–û–ù–¨',
                '–ü–ï–õ–Ø–î–¨', '–í–û–ë–õ–ê', '–ö–ê–ú–ë–ê–õ–ê', '–•/–ö', '–ì/–ö', '–°/–°', '–í–Ø–õ–ï–ù']
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    product_mask = df_data.iloc[:, 0].astype(str).str.contains('|'.join(keywords), case=False, na=False)
    product_data = df_data[product_mask]
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(product_data)}")
    
    if len(product_data) == 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processed_data = []
    
    for index, row in product_data.iterrows():
        try:
            nomenclature = str(row.iloc[0])
            initial_balance = pd.to_numeric(row.iloc[4], errors='coerce')
            incoming = pd.to_numeric(row.iloc[6], errors='coerce')
            outgoing = pd.to_numeric(row.iloc[7], errors='coerce')
            final_balance = pd.to_numeric(row.iloc[8], errors='coerce')
            
            if pd.notna(initial_balance) and pd.notna(incoming) and pd.notna(outgoing) and pd.notna(final_balance):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —É—Å—É—à–∫—É
                actual_shrinkage = calculate_actual_shrinkage({
                    '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': initial_balance,
                    '–ü—Ä–∏—Ö–æ–¥': incoming,
                    '–†–∞—Å—Ö–æ–¥': outgoing,
                    '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': final_balance
                })
                
                processed_data.append({
                    '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': nomenclature,
                    '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': initial_balance,
                    '–ü—Ä–∏—Ö–æ–¥': incoming,
                    '–†–∞—Å—Ö–æ–¥': outgoing,
                    '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': final_balance,
                    '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è_—É—Å—É—à–∫–∞': actual_shrinkage,
                    '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π': 7
                })
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index}: {str(e)}")
            continue
    
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(processed_data)}")
    
    if len(processed_data) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    dataset = pd.DataFrame(processed_data)
    dataset.columns = ['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫', '–ü—Ä–∏—Ö–æ–¥', '–†–∞—Å—Ö–æ–¥', '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è_—É—Å—É—à–∫–∞', '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π']
    
    print(f"\nüìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(dataset[['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫', '–ü—Ä–∏—Ö–æ–¥', '–†–∞—Å—Ö–æ–¥', '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è_—É—Å—É—à–∫–∞']].head().to_string())
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Å—É—à–∫–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    system = ShrinkageSystem()
    system.config['enable_verification'] = True
    system.config['use_adaptive_model'] = True
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"\nüßÆ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏...")
    results = system.process_dataset(
        dataset=dataset,
        source_filename=os.path.basename(file_path),
        use_adaptive=True
    )
    
    if results['status'] != 'success':
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    coefficients = results.get('coefficients', [])
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(coefficients)} –∑–∞–ø–∏—Å–µ–π):")
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_accuracy = 0
    valid_coefficients = 0
    
    for i, coeff in enumerate(coefficients[:15]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        nomenclature = coeff.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')
        accuracy = coeff.get('–¢–æ—á–Ω–æ—Å—Ç—å_R2', 0)
        verification = coeff.get('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', {})
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–Ω–æ—Å—Ç—å
        if accuracy > 0:
            total_accuracy += accuracy
            valid_coefficients += 1
        
        if verification:
            verification_status = verification.get('verification_status', 'unknown')
            validation_status = verification.get('validation_status', {})
            overall_status = validation_status.get('overall_status', 'unknown')
            
            print(f"   {i+1:2d}. {nomenclature[:35]:35} | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:6.2f}% | –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {overall_status.upper()}")
        else:
            print(f"   {i+1:2d}. {nomenclature[:35]:35} | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:6.2f}% | –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–ï–¢ –î–ê–ù–ù–´–•")
    
    # –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å
    avg_accuracy = total_accuracy / valid_coefficients if valid_coefficients > 0 else 0
    print(f"\nüìà –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {avg_accuracy:.2f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_dir = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    os.makedirs(output_dir, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    coefficients_file = os.path.join(output_dir, f"–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã_—É—Å—É—à–∫–∏_{os.path.splitext(os.path.basename(file_path))[0]}_–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è_–ø–æ–ª–Ω–∞—è.json")
    with open(coefficients_file, 'w', encoding='utf-8') as f:
        json.dump(coefficients, f, ensure_ascii=False, indent=2)
    print(f"\nüíæ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {coefficients_file}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç—ã
    reports = results.get('reports', {})
    for report_name, report_content in reports.items():
        report_file = os.path.join(output_dir, f"{report_name}_–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è_–ø–æ–ª–Ω–∞—è.html")
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)
        print(f"üíæ –û—Ç—á–µ—Ç '{report_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    
    print(f"\nüéâ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    file_path = r"C:\Users\D_909\Desktop\–¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ\–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ\b3ded820-4385-4a42-abc7-75dc0756d335_6ba7ac50-fb1a-4bea-9489-265bdfdcb8d1_–≤—Å—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 15.07.25 –ø–æ 21.07.25.xls"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
    process_file_with_proper_verification(file_path)


if __name__ == "__main__":
    main()