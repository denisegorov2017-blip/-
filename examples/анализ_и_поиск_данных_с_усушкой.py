#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å —Ä–µ–∞–ª—å–Ω–æ–π —É—Å—É—à–∫–æ–π
"""

import sys
import os
import pandas as pd
import json
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_system import ShrinkageSystem
from core.shrinkage_verification_system import ShrinkageVerificationSystem


def analyze_real_data_for_shrinkage(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å —É—Å—É—à–∫–æ–π."""
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—Å—É—à–∫–æ–π: {file_path}")
    print("=" * 70)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        df = pd.read_excel(file_path, header=None)
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
        return
    
    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    header_row = None
    for i, row in df.iterrows():
        if '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞' in str(row.iloc[0]) and '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫' in str(row.iloc[4]):
            header_row = i
            break
    
    if header_row is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        return analyze_without_headers(df, file_path)
    
    print(f"üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ {header_row}")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    try:
        df_data = pd.read_excel(file_path, header=header_row)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    keywords = ['–†–´–ë–ê', '–°–ï–õ–¨–î–¨', '–°–ö–£–ú–ë–†–ò–Ø', '–©–£–ö–ê', '–û–ö–£–ù–¨', '–ì–û–†–ë–£–®–ê', '–ö–ï–¢–ê', '–°–ï–ú–ì–ê', 
                '–§–û–†–ï–õ–¨', '–ò–ö–†–ê', '–ö–†–ï–í–ï–¢–ö–ò', '–ú–ê–°–õ–ï–ù–ê–Ø', '–ù–ï–†–ö–ê', '–ú–û–ô–í–ê', '–Æ–ö–û–õ–ê', '–í–û–ú–ï–†',
                '–ë–†–Æ–®–ö–ò', '–ö–û–†–Æ–®–ö–ê', '–õ–ï–©', '–°–ò–ì', '–î–û–†–ê–î–û', '–ë–ï–õ–û–†–´–ë–ò–¶–ê', '–¢–ê–†–ê–ù–¨', '–ß–ï–•–û–ù–¨',
                '–ü–ï–õ–Ø–î–¨', '–í–û–ë–õ–ê', '–ö–ê–ú–ë–ê–õ–ê', '–•/–ö', '–ì/–ö', '–°/–°', '–í–Ø–õ–ï–ù']
    
    try:
        product_mask = df_data.iloc[:, 0].astype(str).str.contains('|'.join(keywords), case=False, na=False)
        product_data = df_data[product_mask]
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(product_data)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—Å—É—à–∫–∏
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—Å—É—à–∫–∏:")
    significant_shrinkage_items = []
    zero_shrinkage_items = []
    
    for index, row in product_data.iterrows():
        try:
            nomenclature = str(row.iloc[0])
            initial_balance = pd.to_numeric(row.iloc[4], errors='coerce')
            incoming = pd.to_numeric(row.iloc[6], errors='coerce')
            outgoing = pd.to_numeric(row.iloc[7], errors='coerce')
            final_balance = pd.to_numeric(row.iloc[8], errors='coerce')
            
            if pd.notna(initial_balance) and pd.notna(incoming) and pd.notna(outgoing) and pd.notna(final_balance):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —É—Å—É—à–∫—É
                theoretical_balance = initial_balance + incoming - outgoing
                actual_shrinkage = theoretical_balance - final_balance
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —É—Å—É—à–∫–∏ (–±–æ–ª–µ–µ 10 –≥—Ä–∞–º–º–æ–≤)
                if abs(actual_shrinkage) > 0.01:
                    significant_shrinkage_items.append({
                        'nomenclature': nomenclature,
                        'initial_balance': initial_balance,
                        'incoming': incoming,
                        'outgoing': outgoing,
                        'final_balance': final_balance,
                        'theoretical_balance': theoretical_balance,
                        'actual_shrinkage': actual_shrinkage
                    })
                else:
                    zero_shrinkage_items.append({
                        'nomenclature': nomenclature,
                        'initial_balance': initial_balance,
                        'incoming': incoming,
                        'outgoing': outgoing,
                        'final_balance': final_balance,
                        'theoretical_balance': theoretical_balance,
                        'actual_shrinkage': actual_shrinkage
                    })
        except Exception as e:
            continue
    
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π: {len(significant_shrinkage_items)}")
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å –Ω—É–ª–µ–≤–æ–π —É—Å—É—à–∫–æ–π: {len(zero_shrinkage_items)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π
    if significant_shrinkage_items:
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π:")
        for i, item in enumerate(significant_shrinkage_items[:10]):
            print(f"   {i+1}. {item['nomenclature'][:40]:40} | –£—Å—É—à–∫–∞: {item['actual_shrinkage']:8.3f} –∫–≥")
    else:
        print(f"\n‚ö†Ô∏è  –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –∑–Ω–∞—á–∏–º–æ–π —É—Å—É—à–∫–æ–π")
        print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ —É—Å—É—à–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ —Å —É—Å—É—à–∫–æ–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
    if significant_shrinkage_items:
        process_items_with_shrinkage(significant_shrinkage_items, file_path)
    else:
        print(f"\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
        demonstrate_with_synthetic_data()


def analyze_without_headers(df, file_path):
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤."""
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    data_rows = []
    for index, row in df.iterrows():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
        try:
            col4 = pd.to_numeric(row.iloc[4], errors='coerce')
            col6 = pd.to_numeric(row.iloc[6], errors='coerce')
            col7 = pd.to_numeric(row.iloc[7], errors='coerce')
            col8 = pd.to_numeric(row.iloc[8], errors='coerce')
            
            if pd.notna(col4) and pd.notna(col6) and pd.notna(col7) and pd.notna(col8):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
                if col4 > 0 or col6 > 0 or col7 > 0 or col8 > 0:
                    data_rows.append({
                        'index': index,
                        'col0': str(row.iloc[0]) if len(row) > 0 else '',
                        'col4': col4,
                        'col6': col6,
                        'col7': col7,
                        'col8': col8
                    })
        except:
            continue
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(data_rows)}")
    
    if data_rows:
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏:")
        for i, row in enumerate(data_rows[:5]):
            print(f"   {i+1}. {row['col0'][:40]:40} | {row['col4']:8.3f} | {row['col6']:8.3f} | {row['col7']:8.3f} | {row['col8']:8.3f}")
    
    return data_rows


def process_items_with_shrinkage(items, file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Å —É—Å—É—à–∫–æ–π."""
    print(f"\nüßÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å —É—Å—É—à–∫–æ–π...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processed_data = []
    for item in items:
        processed_data.append({
            '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': item['nomenclature'],
            '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': item['initial_balance'],
            '–ü—Ä–∏—Ö–æ–¥': item['incoming'],
            '–†–∞—Å—Ö–æ–¥': item['outgoing'],
            '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫': item['final_balance'],
            '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π': 7  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        })
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    dataset = pd.DataFrame(processed_data)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Å—É—à–∫–∏
    system = ShrinkageSystem()
    system.config['enable_verification'] = True
    system.config['use_adaptive_model'] = True
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(processed_data)} –∑–∞–ø–∏—Å–µ–π...")
    results = system.process_dataset(
        dataset=dataset,
        source_filename=os.path.basename(file_path),
        use_adaptive=True
    )
    
    if results['status'] == 'success':
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        coefficients = results.get('coefficients', [])
        print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        
        for i, coeff in enumerate(coefficients[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            nomenclature = coeff.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞')
            accuracy = coeff.get('–¢–æ—á–Ω–æ—Å—Ç—å_R2', 0)
            model = coeff.get('–ú–æ–¥–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
            a_coeff = coeff.get('–ö–æ—ç—Ñ_a', 0)
            
            print(f"   {i+1}. {nomenclature[:40]:40} | R¬≤: {accuracy:6.2f}% | a: {a_coeff:.6f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            verification = coeff.get('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', {})
            if verification:
                validation_status = verification.get('validation_status', {})
                overall_status = validation_status.get('overall_status', 'unknown')
                metrics = verification.get('accuracy_metrics', {})
                
                print(f"      –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {overall_status.upper()} | –ü—Ä–æ–≥–Ω–æ–∑: {metrics.get('predicted_shrinkage', 0):.3f} –∫–≥")
            else:
                print(f"      –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–ï–¢ –î–ê–ù–ù–´–•")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_dir = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        os.makedirs(output_dir, exist_ok=True)
        
        coefficients_file = os.path.join(output_dir, f"–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã_—É—Å—É—à–∫–∏_—Å_–∞–Ω–∞–ª–∏–∑–æ–º_{os.path.splitext(os.path.basename(file_path))[0]}.json")
        with open(coefficients_file, 'w', encoding='utf-8') as f:
            json.dump(coefficients, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {coefficients_file}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


def demonstrate_with_synthetic_data():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print(f"\nüß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_system = ShrinkageVerificationSystem()
    
    # –ü—Ä–∏–º–µ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —É—Å—É—à–∫–æ–π
    synthetic_data = {
        'name': '–°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ê–Ø –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê',
        'initial_balance': 100.0,
        'incoming': 50.0,
        'outgoing': 30.0,
        'final_balance': 118.5,  # –£—Å—É—à–∫–∞ 1.5 –∫–≥
        'storage_days': 7
    }
    
    # –ü—Ä–∏–º–µ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    synthetic_coefficients = {
        'model_type': 'exponential',
        'coefficients': {
            'a': 0.015,  # 1.5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å—É—à–∫–∞
            'b': 0.05,   # –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
            'c': 0.001   # –õ–∏–Ω–µ–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        },
        'r_squared': 0.95
    }
    
    print(f"üìä –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {synthetic_data['initial_balance']} –∫–≥")
    print(f"   –ü—Ä–∏—Ö–æ–¥: {synthetic_data['incoming']} –∫–≥")
    print(f"   –†–∞—Å—Ö–æ–¥: {synthetic_data['outgoing']} –∫–≥")
    print(f"   –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {synthetic_data['final_balance']} –∫–≥")
    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: 1.500 –∫–≥")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    verification_results = verification_system.verify_coefficients_accuracy(synthetic_data, synthetic_coefficients)
    
    if verification_results['verification_status'] == 'success':
        metrics = verification_results['accuracy_metrics']
        validation = verification_results['validation_status']
        
        print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics['predicted_shrinkage']:8.3f} –∫–≥")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞:   {metrics['actual_shrinkage']:8.3f} –∫–≥")
        print(f"   R¬≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:       {metrics['r_squared']:8.4f}")
        print(f"   –°—Ç–∞—Ç—É—Å:               {validation['overall_status'].upper()}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = verification_system.generate_verification_report(verification_results)
        print(f"\nüìÑ –û—Ç—á–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(report)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    file_path = r"C:\Users\D_909\Desktop\–¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ\–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ\b3ded820-4385-4a42-abc7-75dc0756d335_6ba7ac50-fb1a-4bea-9489-265bdfdcb8d1_–≤—Å—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 15.07.25 –ø–æ 21.07.25.xls"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    analyze_real_data_for_shrinkage(file_path)


if __name__ == "__main__":
    main()