#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ/
–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏.
"""

import sys
import os
import json
import pandas as pd
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.core.excel_hierarchy_preserver import ExcelHierarchyPreserver, json_to_excel
from src.core.json_parser import parse_from_json
from src.core.shrinkage_system import ShrinkageSystem
from src.core.data_processor import DataProcessor
from src.core.reporting import ReportGenerator


def test_real_data_processing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    source_data_dir = Path("–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if not source_data_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_data_dir}")
        return False
    
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {source_data_dir}")
    
    # –ò—â–µ–º Excel —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    excel_files = list(source_data_dir.glob("*.xls")) + list(source_data_dir.glob("*.xlsx"))
    
    if not excel_files:
        print("‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤")
        return False
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = Path("—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    results_dir.mkdir(exist_ok=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    processed_files = 0
    
    for i, excel_file in enumerate(excel_files, 1):
        print(f"\nüìÑ [{i}/{len(excel_files)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {excel_file.name}")
        
        try:
            # 1. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel
            print("   üìã 1. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel...")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Excel –≤ JSON
            json_file = results_dir / f"real_data_test_{i}.json"
            try:
                preserver = ExcelHierarchyPreserver(str(excel_file))
                if preserver.to_json(str(json_file)):
                    print("      ‚úÖ Excel ‚Üí JSON: –£–°–ü–ï–®–ù–û")
                else:
                    print("      ‚ùå Excel ‚Üí JSON: –û–®–ò–ë–ö–ê")
                    continue
            except Exception as e:
                print(f"      ‚ùå Excel ‚Üí JSON: –û–®–ò–ë–ö–ê - {e}")
                continue
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel
            restored_excel_file = results_dir / f"real_data_restored_{i}.xlsx"
            try:
                if json_to_excel(str(json_file), str(restored_excel_file)):
                    print("      ‚úÖ JSON ‚Üí Excel: –£–°–ü–ï–®–ù–û")
                else:
                    print("      ‚ùå JSON ‚Üí Excel: –û–®–ò–ë–ö–ê")
                    continue
            except Exception as e:
                print(f"      ‚ùå JSON ‚Üí Excel: –û–®–ò–ë–ö–ê - {e}")
                continue
            
            # 2. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            print("   üìã 2. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞...")
            try:
                # –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ
                if excel_file.name == "–ø—Ä–∏–º–µ—Ä_–¥–∞–Ω–Ω—ã—Ö_–ø–æ_—É—Å—É—à–∫–µ.xlsx":
                    # –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
                    dataframe = pd.read_excel(excel_file)
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    dataframe = dataframe.rename(columns={
                        '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫': '–ù–∞—á–∞–ª—å–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫',
                        '–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫': '–ö–æ–Ω–µ—á–Ω—ã–π_–æ—Å—Ç–∞—Ç–æ–∫',
                        '–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)': '–ü–µ—Ä–∏–æ–¥_—Ö—Ä–∞–Ω–µ–Ω–∏—è_–¥–Ω–µ–π'
                    })
                    print(f"      ‚úÖ –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ Excel: –£–°–ü–ï–®–ù–û ({len(dataframe)} —Å—Ç—Ä–æ–∫)")
                else:
                    # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä
                    dataframe = parse_from_json(str(json_file))
                    if not dataframe.empty:
                        print(f"      ‚úÖ JSON ‚Üí DataFrame: –£–°–ü–ï–®–ù–û ({len(dataframe)} —Å—Ç—Ä–æ–∫)")
                    else:
                        print("      ‚ö†Ô∏è  JSON ‚Üí DataFrame: –ü–£–°–¢–û–ô DataFrame (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –∏–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)")
                        # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        try:
                            temp_df = pd.read_excel(excel_file)
                            if len(temp_df) > 0:
                                print(f"      ‚úÖ –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ: –£–°–ü–ï–®–ù–û ({len(temp_df)} —Å—Ç—Ä–æ–∫)")
                                dataframe = temp_df
                            else:
                                print("      ‚ùå –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ: –ü–£–°–¢–û–ô DataFrame")
                                continue
                        except Exception as e:
                            print(f"      ‚ùå –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ: –û–®–ò–ë–ö–ê - {e}")
                            continue
            except Exception as e:
                print(f"      ‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö: –û–®–ò–ë–ö–ê - {e}")
                continue
            
            # 3. –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏
            print("   üìã 3. –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏...")
            try:
                system = ShrinkageSystem()
                results = system.process_dataset(dataframe, excel_file.name, use_adaptive=True)
                if results['status'] == 'success':
                    print(f"      ‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: –£–°–ü–ï–®–ù–û ({len(results['coefficients'])} –∑–∞–ø–∏—Å–µ–π)")
                    if 'summary' in results and 'avg_accuracy' in results['summary']:
                        print(f"         –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {results['summary']['avg_accuracy']:.2f}%")
                    processed_files += 1
                else:
                    print(f"      ‚ùå –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: –û–®–ò–ë–ö–ê - {results['message']}")
                    continue
            except Exception as e:
                print(f"      ‚ùå –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: –û–®–ò–ë–ö–ê - {e}")
                continue
            
            # 4. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("   üìã 4. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            try:
                results_file = results_dir / f"real_data_results_{i}.json"
                with open(results_file, 'w', encoding='utf-8') as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)
                print(f"      ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: –£–°–ü–ï–®–ù–û ({results_file.name})")
            except Exception as e:
                print(f"      ‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: –û–®–ò–ë–ö–ê - {e}")
                continue
            
            print(f"   üéâ –§–∞–π–ª {excel_file.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {excel_file.name}: {e}")
            import traceback
            traceback.print_exc()
            continue
    
    print("\n" + "=" * 60)
    if processed_files > 0:
        print("üéâ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù!")
        print(f"   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files} –∏–∑ {len(excel_files)}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {results_dir}")
    else:
        print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–ë–†–ê–ë–û–¢–ê–¢–¨ –ù–ò –û–î–ò–ù –§–ê–ô–õ")
    
    return processed_files > 0


def test_real_data_structure_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    source_data_dir = Path("–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if not source_data_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_data_dir}")
        return False
    
    # –ò—â–µ–º Excel —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    excel_files = list(source_data_dir.glob("*.xls")) + list(source_data_dir.glob("*.xlsx"))
    
    if not excel_files:
        print("‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤")
        return False
    
    print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã {len(excel_files)} Excel —Ñ–∞–π–ª–æ–≤...")
    
    required_columns = [
        '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
        '–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫',
        '–ü—Ä–∏—Ö–æ–¥',
        '–†–∞—Å—Ö–æ–¥',
        '–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫',
        '–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)'
    ]
    
    valid_files = 0
    
    for i, excel_file in enumerate(excel_files, 1):
        print(f"\nüìÑ [{i}/{len(excel_files)}] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: {excel_file.name}")
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(excel_file)
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
            print(f"   –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                print(f"   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_columns}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–≥—É—Ç –ª–∏ —Å—Ç–æ–ª–±—Ü—ã –∏–º–µ—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–µ –∏–º—è
                found_alternatives = []
                for missing_col in missing_columns:
                    for actual_col in df.columns:
                        if missing_col.lower().replace(' ', '_') == actual_col.lower().replace(' ', '_'):
                            found_alternatives.append((missing_col, actual_col))
                
                if found_alternatives:
                    print(f"   ‚ÑπÔ∏è  –ù–∞–π–¥–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {found_alternatives}")
            else:
                print(f"   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                valid_files += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                numeric_columns = ['–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫', '–ü—Ä–∏—Ö–æ–¥', '–†–∞—Å—Ö–æ–¥', '–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫', '–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)']
                data_types_valid = True
                
                for col in numeric_columns:
                    if col in df.columns:
                        if not pd.api.types.is_numeric_dtype(df[col]):
                            print(f"   ‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü '{col}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–º —Ç–∏–ø–æ–º")
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø
                            try:
                                df[col] = pd.to_numeric(df[col], errors='coerce')
                                nan_count = df[col].isna().sum()
                                if nan_count > 0:
                                    print(f"   ‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü '{col}' —Å–æ–¥–µ—Ä–∂–∏—Ç {nan_count} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                            except:
                                data_types_valid = False
                    else:
                        print(f"   ‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ")
                
                if data_types_valid:
                    print(f"   ‚úÖ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Ä–∞—Å—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
                negative_balance_cols = ['–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫', '–ü—Ä–∏—Ö–æ–¥', '–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫']
                for col in negative_balance_cols:
                    if col in df.columns:
                        negative_count = (df[col] < 0).sum()
                        if negative_count > 0:
                            print(f"   ‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü '{col}' —Å–æ–¥–µ—Ä–∂–∏—Ç {negative_count} –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è
                if '–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)' in df.columns:
                    negative_storage_days = (df['–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)'] < 0).sum()
                    if negative_storage_days > 0:
                        print(f"   ‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü '–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–µ–π)' —Å–æ–¥–µ—Ä–∂–∏—Ç {negative_storage_days} –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {excel_file.name}: {e}")
    
    print("\n" + "=" * 60)
    if valid_files > 0:
        print(f"‚úÖ {valid_files} –∏–∑ {len(excel_files)} —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±—É–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ!")
    else:
        print("‚ùå –ù–ï–¢ –§–ê–ô–õ–û–í, –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–©–ò–• –¢–†–ï–ë–£–ï–ú–û–ô –°–¢–†–£–ö–¢–£–†–ï!")
    
    return valid_files > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = Path("—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    results_dir.mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    structure_valid = test_real_data_structure_validation()
    processing_success = test_real_data_processing()
    
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if structure_valid and processing_success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print("   ‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        if not structure_valid:
            print("   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        if not processing_success:
            print("   ‚Ä¢ –í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ'")
        print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö")


if __name__ == "__main__":
    main()