#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
"""

import sys
import os
import json
from openpyxl import load_workbook

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def check_restored_excel_grouping():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É."""
    restored_file = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π_—Ç–µ—Å—Ç_–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞.xlsx"
    
    if not os.path.exists(restored_file):
        print(f"‚ùå –§–∞–π–ª {restored_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª
        wb = load_workbook(restored_file)
        ws = wb.active
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {restored_file}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç: {ws.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–æ–∫
        grouped_rows = []
        for row_num, row_dim in ws.row_dimensions.items():
            if hasattr(row_dim, 'outline_level') and row_dim.outline_level > 0:
                grouped_rows.append({
                    'row': row_num,
                    'level': row_dim.outline_level,
                    'hidden': getattr(row_dim, 'hidden', False)
                })
        
        if grouped_rows:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫: {len(grouped_rows)} —Å—Ç—Ä–æ–∫")
            for row_info in grouped_rows:
                status = "—Å–≤–µ—Ä–Ω—É—Ç–∞" if row_info['hidden'] else "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞"
                print(f"   –°—Ç—Ä–æ–∫–∞ {row_info['row']}: —É—Ä–æ–≤–µ–Ω—å {row_info['level']}, {status}")
        else:
            print("‚ö†Ô∏è  –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å—Ç–æ–ª–±—Ü–æ–≤
        grouped_cols = []
        for col_letter, col_dim in ws.column_dimensions.items():
            if hasattr(col_dim, 'outline_level') and col_dim.outline_level > 0:
                grouped_cols.append({
                    'column': col_letter,
                    'level': col_dim.outline_level,
                    'hidden': getattr(col_dim, 'hidden', False)
                })
        
        if grouped_cols:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(grouped_cols)} —Å—Ç–æ–ª–±—Ü–æ–≤")
            for col_info in grouped_cols:
                status = "—Å–≤–µ—Ä–Ω—É—Ç" if col_info['hidden'] else "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
                print(f"   –°—Ç–æ–ª–±–µ—Ü {col_info['column']}: —É—Ä–æ–≤–µ–Ω—å {col_info['level']}, {status}")
        else:
            print("‚ö†Ô∏è  –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        wb.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print("üî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞")
    print("=" * 60)
    
    success = check_restored_excel_grouping()
    
    if success:
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("   –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ Excel ‚Üî JSON")
    else:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()