#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏
"""

import sys
import os
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_verification_system import ShrinkageVerificationSystem


def test_verification_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_system = ShrinkageVerificationSystem()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    test_data_1 = {
        'name': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ 1',
        'initial_balance': 100.0,
        'incoming': 50.0,
        'outgoing': 20.0,
        'final_balance': 127.5,  # –£—Å—É—à–∫–∞ 2.5
        'storage_days': 7
    }
    
    # –ò–¥–µ–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    test_coefficients_1 = {
        'model_type': 'exponential',
        'coefficients': {'a': 0.019, 'b': 0.049, 'c': 0.001},
        'r_squared': 0.95
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    results_1 = verification_system.verify_coefficients_accuracy(test_data_1, test_coefficients_1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert results_1['verification_status'] == 'success', "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
    print("  ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    metrics_1 = results_1['accuracy_metrics']
    assert metrics_1['r_squared'] > 0.85, f"R¬≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0.85, –ø–æ–ª—É—á–µ–Ω–æ {metrics_1['r_squared']:.4f}"
    print(f"  ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏: {metrics_1['r_squared']:.4f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validation_1 = results_1['validation_status']
    assert validation_1['overall_status'] == 'acceptable', f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'acceptable', –ø–æ–ª—É—á–µ–Ω–æ '{validation_1['overall_status']}'"
    print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_1['overall_status']}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    print("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏")
    test_data_2 = {
        'name': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ 2',
        'initial_balance': 100.0,
        'incoming': 50.0,
        'outgoing': 20.0,
        'final_balance': 125.0,  # –£—Å—É—à–∫–∞ 5.0
        'storage_days': 7
    }
    
    # –ù–µ—Ç–æ—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    test_coefficients_2 = {
        'model_type': 'exponential',
        'coefficients': {'a': 0.01, 'b': 0.01, 'c': 0.001},
        'r_squared': 0.6
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    results_2 = verification_system.verify_coefficients_accuracy(test_data_2, test_coefficients_2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert results_2['verification_status'] == 'success', "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
    print("  ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validation_2 = results_2['validation_status']
    # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ç—É—Å warning –∏–ª–∏ critical –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_2['overall_status']}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    print("\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    report_1 = verification_system.generate_verification_report(results_1)
    assert len(report_1) > 0, "–û—Ç—á–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    assert "–û–¢–ß–ï–¢ –û –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò" in report_1, "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    print("  ‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   - –¢–µ—Å—Ç 1 (–∏–¥–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): {validation_1['overall_status']}")
    print(f"   - –¢–µ—Å—Ç 2 (–Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å): {validation_2['overall_status']}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    print("=" * 70)
    
    verification_system = ShrinkageVerificationSystem()
    
    # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    print("\nüìã –¢–µ—Å—Ç: –ù—É–ª–µ–≤–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    test_data_zero = {
        'name': '–ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å',
        'initial_balance': 0.0,
        'incoming': 0.0,
        'outgoing': 0.0,
        'final_balance': 0.0,
        'storage_days': 7
    }
    
    test_coefficients_zero = {
        'model_type': 'exponential',
        'coefficients': {'a': 0.015, 'b': 0.049, 'c': 0.001},
        'r_squared': 0.95
    }
    
    results_zero = verification_system.verify_coefficients_accuracy(test_data_zero, test_coefficients_zero)
    assert results_zero['verification_status'] == 'success', "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
    print("  ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —É—Å—É—à–∫–æ–π (–∏–∑–±—ã—Ç–æ–∫)
    print("\nüìã –¢–µ—Å—Ç: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —É—Å—É—à–∫–∞ (–∏–∑–±—ã—Ç–æ–∫)")
    test_data_negative = {
        'name': '–ò–∑–±—ã—Ç–æ–∫',
        'initial_balance': 100.0,
        'incoming': 50.0,
        'outgoing': 20.0,
        'final_balance': 135.0,  # –ò–∑–±—ã—Ç–æ–∫ 5.0
        'storage_days': 7
    }
    
    test_coefficients_negative = {
        'model_type': 'exponential',
        'coefficients': {'a': 0.015, 'b': 0.049, 'c': 0.001},
        'r_squared': 0.95
    }
    
    results_negative = verification_system.verify_coefficients_accuracy(test_data_negative, test_coefficients_negative)
    assert results_negative['verification_status'] == 'success', "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
    print("  ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —É—Å—É—à–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    test_verification_system()
    test_edge_cases()
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")