#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script to demonstrate how to properly use our shrinkage formula
"""

import sys
import os
import numpy as np

# Add the src directory to the path
src_path = os.path.join(os.path.dirname(__file__), 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

def test_formula_usage():
    """Test and demonstrate proper usage of the shrinkage formula"""
    try:
        print("Testing proper usage of the shrinkage formula...")
        print("=" * 60)
        
        # Import the calculators
        from src.core.shrinkage_calculator import ShrinkageCalculator
        from src.core.adaptive_shrinkage_calculator import AdaptiveShrinkageModel
        
        # Create calculators
        calculator = ShrinkageCalculator()
        adaptive_model = AdaptiveShrinkageModel()
        
        # Show formula explanations
        print("üìö –§–æ—Ä–º—É–ª–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —É—Å—É—à–∫–∏:")
        print(calculator.explain_formula_usage())
        
        print("\n" + "=" * 60)
        print("üìö –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —É—Å—É—à–∫–∏:")
        print(adaptive_model.explain_adaptive_formula_usage())
        
        # Test data for a typical fish product
        test_data = {
            'name': '–°–ò–ù–ï–¶ –í–Ø–õ–ï–ù–´–ô',
            'initial_balance': 100.0,  # 100 kg
            'incoming': 20.0,          # 20 kg received
            'outgoing': 30.0,          # 30 kg sold
            'final_balance': 85.0,     # 85 kg actual inventory
            'storage_days': 7          # 7 days of storage
        }
        
        print("\n" + "=" * 60)
        print("üß™ –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:")
        print(f"–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: {test_data['name']}")
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {test_data['initial_balance']} –∫–≥")
        print(f"–ü—Ä–∏—Ö–æ–¥: {test_data['incoming']} –∫–≥")
        print(f"–†–∞—Å—Ö–æ–¥: {test_data['outgoing']} –∫–≥")
        print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {test_data['final_balance']} –∫–≥")
        print(f"–î–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è: {test_data['storage_days']}")
        
        # Calculate theoretical balance and actual shrinkage
        theoretical_balance = test_data['initial_balance'] + test_data['incoming'] - test_data['outgoing']
        actual_shrinkage = theoretical_balance - test_data['final_balance']
        shrinkage_rate = actual_shrinkage / test_data['initial_balance'] if test_data['initial_balance'] > 0 else 0
        
        print(f"\nüìä –†–∞—Å—á–µ—Ç—ã:")
        print(f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {theoretical_balance} –∫–≥")
        print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {actual_shrinkage} –∫–≥")
        print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å—É—à–∫–∏: {shrinkage_rate:.4f} ({shrinkage_rate*100:.2f}%)")
        
        # Calculate coefficients using different models
        print(f"\nüî¨ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:")
        for model_type in ['exponential', 'linear', 'polynomial']:
            result = calculator.calculate_coefficients(test_data, model_type)
            print(f"\n–ú–æ–¥–µ–ª—å: {model_type}")
            print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: a={result['a']}, b={result['b']}, c={result['c']}")
            print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {result['accuracy']}%")
            print(f"  –°—Ç–∞—Ç—É—Å: {result['status']}")
        
        # Test adaptive model
        print(f"\nü§ñ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å:")
        coefficients = adaptive_model.adapt_coefficients(test_data, nomenclature=test_data['name'])
        print(f"  –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: a={coefficients['a']:.4f}, b={coefficients['b']:.4f}, c={coefficients['c']:.4f}")
        
        # Predict shrinkage using the adaptive model
        prediction = adaptive_model.predict_with_adaptation(
            t=test_data['storage_days'],
            initial_balance=test_data['initial_balance'],
            nomenclature=test_data['name']
        )
        
        predicted_absolute_shrinkage = prediction * test_data['initial_balance']
        predicted_final_balance = test_data['initial_balance'] - predicted_absolute_shrinkage
        
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {prediction:.4f} ({prediction*100:.2f}%)")
        print(f"  –ê–±—Å–æ–ª—é—Ç–Ω–∞—è —É—Å—É—à–∫–∞: {predicted_absolute_shrinkage:.2f} –∫–≥")
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {predicted_final_balance:.2f} –∫–≥")
        
        # Compare with actual
        print(f"\n‚öñÔ∏è  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {actual_shrinkage:.2f} –∫–≥")
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {predicted_absolute_shrinkage:.2f} –∫–≥")
        print(f"  –†–∞–∑–Ω–∏—Ü–∞: {abs(actual_shrinkage - predicted_absolute_shrinkage):.2f} –∫–≥")
        
        return True
        
    except Exception as e:
        print(f"ERROR: Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("Running formula usage test...")
    print("=" * 60)
    
    success = test_formula_usage()
    
    print("=" * 60)
    if success:
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("–§–æ—Ä–º—É–ª–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —É—Å—É—à–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        print("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º—É–ª–æ–π –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —É—Å—É—à–∫–∏.")