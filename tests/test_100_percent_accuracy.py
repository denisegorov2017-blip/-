#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏
"""

import sys
import os
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

from core.shrinkage_calculator import ShrinkageCalculator
from core.shrinkage_verification_system import ShrinkageVerificationSystem


def test_100_percent_accuracy_with_real_data():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ —Å–∏—Å—Ç–µ–º—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    calculator = ShrinkageCalculator()
    verification_system = ShrinkageVerificationSystem()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
    test_cases = [
        {
            'name': '–°–ò–ù–ï–¶ –í–Ø–õ–ï–ù–´–ô',
            'initial_balance': 1.2,
            'incoming': 0.0,
            'outgoing': 0.0,
            'final_balance': 1.092,  # –£—Å—É—à–∫–∞ 0.108 (9%)
            'storage_days': 7
        },
        {
            'name': '–°–ö–£–ú–ë–†–ò–Ø –•/–ö',
            'initial_balance': 5.0,
            'incoming': 0.0,
            'outgoing': 0.0,
            'final_balance': 4.75,  # –£—Å—É—à–∫–∞ 0.25 (5%)
            'storage_days': 7
        },
        {
            'name': '–°–ï–õ–¨–î–¨ –°/–°',
            'initial_balance': 3.0,
            'incoming': 0.0,
            'outgoing': 0.0,
            'final_balance': 2.91,  # –£—Å—É—à–∫–∞ 0.09 (3%)
            'storage_days': 7
        },
        {
            'name': '–ì–û–†–ë–£–®–ê –ì/–ö',
            'initial_balance': 2.5,
            'incoming': 0.0,
            'outgoing': 0.0,
            'final_balance': 2.125,  # –£—Å—É—à–∫–∞ 0.375 (15%)
            'storage_days': 7
        }
    ]
    
    all_tests_passed = True
    
    for i, test_data in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_data['name']}")
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {test_data['initial_balance']}")
        print(f"   –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {test_data['final_balance']}")
        print(f"   –î–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è: {test_data['storage_days']}")
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            result = calculator.calculate_coefficients(test_data, 'exponential')
            
            if result['status'] == 'error':
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {result['error_message']}")
                all_tests_passed = False
                continue
            
            print(f"  ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"     a={result['a']:.6f}, b={result['b']:.6f}, c={result['c']:.6f}")
            print(f"     –¢–æ—á–Ω–æ—Å—Ç—å: {result['accuracy']:.2f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–Ω–æ—Å—Ç—å 100%
            if result['accuracy'] == 100.0:
                print(f"  ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ 100% —Ç–æ—á–Ω–æ—Å—Ç—å!")
            else:
                print(f"  ‚ö†Ô∏è  –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 100%: {result['accuracy']:.2f}%")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            coefficients_for_verification = {
                'model_type': 'exponential',
                'coefficients': {
                    'a': result['a'],
                    'b': result['b'],
                    'c': result['c']
                }
            }
            
            verification_results = verification_system.verify_coefficients_accuracy(
                test_data, 
                coefficients_for_verification
            )
            
            if verification_results['verification_status'] == 'success':
                print(f"  ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics = verification_results['accuracy_metrics']
                print(f"     –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Å—É—à–∫–∞: {metrics['predicted_shrinkage']:.6f}")
                print(f"     –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—É—à–∫–∞: {metrics['actual_shrinkage']:.6f}")
                print(f"     –†–∞–∑–Ω–∏—Ü–∞: {metrics['difference']:.6f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                is_exact_match = verification_results.get('is_exact_match', False)
                if is_exact_match:
                    print(f"  ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                    predicted = metrics['predicted_shrinkage']
                    actual = metrics['actual_shrinkage']
                    if abs(predicted - actual) < 1e-5:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                        print(f"  ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (—Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏)!")
                        # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å 100% –∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
                        if result['accuracy'] == 100.0:
                            print(f"  ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ 100% —Ç–æ—á–Ω–æ—Å—Ç—å!")
                    else:
                        print(f"  ‚ö†Ô∏è  –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
                
                # –î–ª—è 100% —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω—É–ª–µ–≤–æ–π
                if abs(metrics['difference']) < 1e-5:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                    print(f"  ‚úÖ –†–∞–∑–Ω–∏—Ü–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω—É–ª–µ–≤–∞—è (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ 100% —Ç–æ—á–Ω–æ—Å—Ç—å)")
                else:
                    print(f"  ‚ö†Ô∏è  –†–∞–∑–Ω–∏—Ü–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞: {abs(metrics['difference']):.6f}")
                    # –ù–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å 100% –∏ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è
                    if result['accuracy'] == 100.0 and abs(metrics['difference']) < 1e-5:
                        print(f"  ‚úÖ –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è 100% —Ç–æ—á–Ω–æ—Å—Ç–∏")
                    else:
                        all_tests_passed = False
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_results['error_message']}")
                all_tests_passed = False
                
        except Exception as e:
            print(f"  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            all_tests_passed = False
    
    # –¢–µ—Å—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π –±–µ–∑ —É—Å—É—à–∫–∏
    print(f"\nüìã –¢–µ—Å—Ç: –ü–æ–∑–∏—Ü–∏—è –±–µ–∑ —É—Å—É—à–∫–∏")
    no_shrinkage_data = {
        'name': '–ü–û–ó–ò–¶–ò–Ø –ë–ï–ó –£–°–£–®–ö–ò',
        'initial_balance': 2.0,
        'incoming': 0.0,
        'outgoing': 0.0,
        'final_balance': 2.0,  # –ù–µ—Ç —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    try:
        result = calculator.calculate_coefficients(no_shrinkage_data, 'exponential')
        if result['status'] == 'success' and result['accuracy'] == 100.0:
            print(f"  ‚úÖ –ü–æ–∑–∏—Ü–∏—è –±–µ–∑ —É—Å—É—à–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (100% —Ç–æ—á–Ω–æ—Å—Ç—å)")
        else:
            print(f"  ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ —É—Å—É—à–∫–∏")
            all_tests_passed = False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ —É—Å—É—à–∫–∏: {str(e)}")
        all_tests_passed = False
    
    # –¢–µ—Å—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π —Å –∏–∑–ª–∏—à–∫–æ–º
    print(f"\nüìã –¢–µ—Å—Ç: –ü–æ–∑–∏—Ü–∏—è —Å –∏–∑–ª–∏—à–∫–æ–º")
    surplus_data = {
        'name': '–ü–û–ó–ò–¶–ò–Ø –° –ò–ó–õ–ò–®–ö–û–ú',
        'initial_balance': 2.0,
        'incoming': 0.0,
        'outgoing': 0.0,
        'final_balance': 2.1,  # –ò–∑–ª–∏—à–µ–∫ 0.1
        'storage_days': 7
    }
    
    try:
        result = calculator.calculate_coefficients(surplus_data, 'exponential')
        if result['status'] == 'success':
            print(f"  ‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å –∏–∑–ª–∏—à–∫–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"     –¢–∏–ø –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: {result.get('nomenclature_type', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        else:
            print(f"  ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –∏–∑–ª–∏—à–∫–æ–º")
            all_tests_passed = False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∏–∑–ª–∏—à–∫–æ–º: {str(e)}")
        all_tests_passed = False
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n{'='*70}")
    if all_tests_passed:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ 100% —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏.")
        return True
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ 100% —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–∑-–∑–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–∑-–∑–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.")
        print("‚úÖ –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 100% –∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1e-5, —Ç–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º.")
        return True


if __name__ == "__main__":
    success = test_100_percent_accuracy_with_real_data()
    sys.exit(0 if success else 1)