#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ PRODUCTION CHECK: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞


def production_readiness_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ production."""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –ö PRODUCTION")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
    print("\nüîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    modules_to_check = [
        'src.core.excel_hierarchy_preserver',
        'src.core.shrinkage_system',
        'src.core.json_parser',
        'src.core.data_processor',
        'src.core.reporting',
        'src.gui'
    ]
    
    all_modules_imported = True
    for module_name in modules_to_check:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name}")
        except ImportError as e:
            print(f"‚ùå {module_name}: {e}")
            all_modules_imported = False
    
    assert all_modules_imported, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÇ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    test_files_dir = Path("—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    assert test_files_dir.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    required_files = [
        "—Ç–µ—Å—Ç_–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞.json",
        "—Ç–µ—Å—Ç_–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞.xlsx",
        "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π_—Ç–µ—Å—Ç_–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞.xlsx"
    ]
    
    all_files_exist = True
    for file_name in required_files:
        file_path = test_files_dir / file_name
        assert file_path.exists(), f"–§–∞–π–ª {file_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        print(f"‚úÖ {file_name}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    print("\nüîÑ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...")
    try:
        from src.core.excel_hierarchy_preserver import ExcelHierarchyPreserver, json_to_excel
        
        test_excel = str(test_files_dir / "—Ç–µ—Å—Ç_–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞.xlsx")
        test_json = str(test_files_dir / "production_test.json")
        restored_excel = str(test_files_dir / "production_restored.xlsx")
        
        preserver = ExcelHierarchyPreserver(test_excel)
        assert preserver.to_json(test_json), "Excel ‚Üí JSON: –û–®–ò–ë–ö–ê"
        print("‚úÖ Excel ‚Üí JSON: –£–°–ü–ï–®–ù–û")
        
        assert json_to_excel(test_json, restored_excel), "JSON ‚Üí Excel: –û–®–ò–ë–ö–ê"
        print("‚úÖ JSON ‚Üí Excel: –£–°–ü–ï–®–ù–û")
            
        assert os.path.exists(restored_excel), "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
        print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}"
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON —Ñ–∞–π–ª–∞
    print("\nüìÑ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON —Ñ–∞–π–ª–∞...")
    try:
        with open(test_json, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        
        required_keys = ['source_file', 'sheet_count', 'sheets', 'grouping_info']
        all_keys_present = True
        for key in required_keys:
            if key not in json_data:
                all_keys_present = False
                print(f"‚ùå {key}")
            else:
                print(f"‚úÖ {key}")
        
        assert all_keys_present, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ JSON"
            
        assert json_data.get('grouping_info'), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        grouping_sheets = len(json_data['grouping_info'])
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –¥–ª—è {grouping_sheets} –ª–∏—Å—Ç–æ–≤")
            
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON: {e}"
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    print("\nüß© 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    try:
        from src.core.shrinkage_system import ShrinkageSystem
        from src.core.data_processor import DataProcessor
        from src.core.reporting import ReportGenerator
        from src.core.json_parser import parse_from_json
        
        system = ShrinkageSystem()
        processor = DataProcessor({}, None, None)
        reporter = ReportGenerator({})
        dataframe = parse_from_json(test_json)
        
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}"
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    print("\nüìö 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    docs_dir = Path("docs")
    if docs_dir.exists():
        docs_files = list(docs_dir.glob("*.md"))
        if docs_files:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(docs_files)} —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
            for doc_file in docs_files:
                assert doc_file.stat().st_size > 100, f"–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ {doc_file.name} –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ—á—Ç–∏ –ø—É—Å—Ç–æ–π"
                print(f"   ‚úÖ {doc_file.name}")
    else:
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\nüéØ 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    print("\n" + "=" * 60)
    print("üèÜ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ –í PRODUCTION!")
    print("=" * 60)
    
    print("\nüöÄ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û:")
    print("   ‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π")
    print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã")
    print("   ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
    print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON")
    print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
    print("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    print("\nüéâ –ú–û–ñ–ù–û –†–ê–ó–í–ï–†–¢–´–í–ê–¢–¨ –í PRODUCTION!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production."""
    try:
        ready = production_readiness_check()
        if ready:
            print("\nüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION!")
            print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   ‚Ä¢ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–µ—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏")
        else:
            print("\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö PRODUCTION")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()