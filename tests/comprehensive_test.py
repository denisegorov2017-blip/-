#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
"""

import os
import sys
import importlib.util
from pathlib import Path

def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        "src/gui.py",
        "src/dashboard.py", 
        "src/core/shrinkage_html_reporter.py",
        "requirements.txt",
        "README.md",
        "launch.py",
        "launch.bat",
        "ENHANCEMENTS_SUMMARY.md"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_path}")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
    
    if missing_files:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ {len(missing_files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(required_files)}")
    assert not missing_files, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ {len(missing_files)} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    print(f"‚úÖ –í—Å–µ {len(required_files)} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")

def test_module_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    modules_to_test = [
        "flet",
        "streamlit",
        "pandas",
        "numpy",
        "scipy",
        "plotly",
        "loguru"
    ]
    
    failed_imports = []
    for module in modules_to_test:
        try:
            importlib.import_module(module)
            print(f"‚úÖ –ú–æ–¥—É–ª—å {module} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            failed_imports.append(module)
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å {module}: {e}")
    
    if failed_imports:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(failed_imports)} –º–æ–¥—É–ª–µ–π –∏–∑ {len(modules_to_test)}")
    assert not failed_imports, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {len(failed_imports)} –º–æ–¥—É–ª–µ–π"
    print(f"‚úÖ –í—Å–µ {len(modules_to_test)} –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

def test_project_modules():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        from core.shrinkage_system import ShrinkageSystem
        print("‚úÖ –ú–æ–¥—É–ª—å ShrinkageSystem —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        
        
        from core.shrinkage_html_reporter import ShrinkageHTMLReporter
        print("‚úÖ –ú–æ–¥—É–ª—å ShrinkageHTMLReporter —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞: {e}"

def test_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    required_dirs = [
        "src",
        "src/core",
        "–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ",
        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    ]
    
    missing_dirs = []
    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            missing_dirs.append(dir_path)
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
    
    if missing_dirs:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ {len(missing_dirs)} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏–∑ {len(required_dirs)}")
    assert not missing_dirs, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ {len(missing_dirs)} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    print(f"‚úÖ –í—Å–µ {len(required_dirs)} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω—ã")

def test_file_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º...")
    
    test_files = [
        "src/gui.py",
        "src/dashboard.py",
        "src/core/shrinkage_html_reporter.py"
    ]
    
    permission_issues = []
    for file_path in test_files:
        if os.path.exists(file_path):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è
                with open(file_path, 'r', encoding='utf-8') as f:
                    f.read(1)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
                print(f"‚úÖ –§–∞–π–ª {file_path} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è")
            except Exception as e:
                permission_issues.append(file_path)
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª—É {file_path}: {e}")
        else:
            permission_issues.append(file_path)
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if permission_issues:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ {len(permission_issues)} —Ñ–∞–π–ª–∞–º –∏–∑ {len(test_files)}")
    assert not permission_issues, f"–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ {len(permission_issues)} —Ñ–∞–π–ª–∞–º"
    print(f"‚úÖ –í—Å–µ {len(test_files)} —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è")