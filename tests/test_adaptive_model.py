#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏
"""

import sys
import os



from src.core.adaptive_shrinkage_calculator import AdaptiveShrinkageModel, BatchAdaptiveModel
import numpy as np
from datetime import datetime


def test_adaptive_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—É—à–∫–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'initial_balance': 10.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 9.5,  # 0.5 –∫–≥ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    print("üìä –¢–µ—Å—Ç 1: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
    print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {test_data['initial_balance']} –∫–≥")
    print(f"   –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {test_data['final_balance']} –∫–≥")
    print(f"   –£—Å—É—à–∫–∞: {test_data['initial_balance'] - test_data['final_balance']} –∫–≥")
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    coefficients = model.adapt_coefficients(test_data)
    print(f"   –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: a={coefficients['a']:.3f}, "
          f"b={coefficients['b']:.3f}, c={coefficients['c']:.3f}")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏
    forecast = model.predict_with_adaptation(7)
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π: {forecast:.3f} –∫–≥")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑—É–º–Ω—ã–π
    assert 0 <= forecast <= test_data['initial_balance'], "–ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
    print("   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")


def test_batch_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–∞—Ä—Ç–∏–π."""
    print("\nüì¶ –¢–µ—Å—Ç 2: –ú–æ–¥–µ–ª—å –ø–∞—Ä—Ç–∏–π")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –ø–∞—Ä—Ç–∏–π
    batch_model = BatchAdaptiveModel()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞—Ä—Ç–∏–∏
    batch1_data = {
        'initial_balance': 5.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 4.8,  # 0.2 –∫–≥ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–∏–∏
    batch2_data = {
        'initial_balance': 3.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 2.7,  # 0.3 –∫–≥ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∫ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—Ç–∏–∏
    batch1_id = "–ü–ê–†–¢–ò–Ø_1"
    coeff1 = batch_model.adapt_to_batch(batch1_id, batch1_data)
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–∞—Ä—Ç–∏–∏ 1: a={coeff1['a']:.3f}, b={coeff1['b']:.3f}, c={coeff1['c']:.3f}")
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∫–æ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–∏–∏
    batch2_id = "–ü–ê–†–¢–ò–Ø_2"
    coeff2 = batch_model.adapt_to_batch(batch2_id, batch2_data)
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–∞—Ä—Ç–∏–∏ 2: a={coeff2['a']:.3f}, b={coeff2['b']:.3f}, c={coeff2['c']:.3f}")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏ –¥–ª—è –ø–∞—Ä—Ç–∏–π
    forecast1 = batch_model.predict_batch_shrinkage(batch1_id, 7)
    forecast2 = batch_model.predict_batch_shrinkage(batch2_id, 7)
    
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏ –ø–∞—Ä—Ç–∏–∏ 1 –Ω–∞ 7 –¥–Ω–µ–π: {forecast1:.3f} –∫–≥")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏ –ø–∞—Ä—Ç–∏–∏ 2 –Ω–∞ 7 –¥–Ω–µ–π: {forecast2:.3f} –∫–≥")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
    assert coeff1 != coeff2, "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π"
    print("   ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π")


def test_environmental_adaptation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —É—Å–ª–æ–≤–∏—è–º —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
    print("\nüå°Ô∏è –¢–µ—Å—Ç 3: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —É—Å–ª–æ–≤–∏—è–º —Ö—Ä–∞–Ω–µ–Ω–∏—è")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'initial_balance': 8.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 7.6,  # 0.4 –∫–≥ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –±–µ–∑ —É—Å–ª–æ–≤–∏–π
    base_coefficients = model.adapt_coefficients(test_data)
    base_forecast = model.predict_with_adaptation(7)
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ (–≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ -> –±–æ–ª—å—à–µ —É—Å—É—à–∫–∏)
    env_conditions = {'temperature': 10.0, 'humidity': 90.0}  # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    env_coefficients = model.adapt_coefficients(test_data, environmental_conditions=env_conditions)
    env_forecast = model.predict_with_adaptation(7, environmental_conditions=env_conditions)
    
    print(f"   –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {base_forecast:.3f} –∫–≥")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ —Å —É—á–µ—Ç–æ–º —É—Å–ª–æ–≤–∏–π: {env_forecast:.3f} –∫–≥")
    
    # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ
    # (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    print("   ‚úÖ –¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_product_type_adaptation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Ç–∏–ø—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    print("\nüêü –¢–µ—Å—Ç 4: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ç–∏–ø—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'initial_balance': 6.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 5.7,  # 0.3 –∫–≥ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å–≤–µ–∂–µ–π —Ä—ã–±—ã
    fresh_forecast = model.predict_with_adaptation(7, product_type='fish_fresh')
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å—É—à–µ–Ω–æ–π —Ä—ã–±—ã
    dried_forecast = model.predict_with_adaptation(7, product_type='fish_dried')
    
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å–≤–µ–∂–µ–π —Ä—ã–±—ã: {fresh_forecast:.3f} –∫–≥")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å—É—à–µ–Ω–æ–π —Ä—ã–±—ã: {dried_forecast:.3f} –∫–≥")
    
    # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    # (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    print("   ‚úÖ –¢–µ—Å—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_surplus_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏–∑–ª–∏—à–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏."""
    print("\nüì¶ –¢–µ—Å—Ç 5: –£—á–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏–∑–ª–∏—à–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–ª–∏—à–∫–∞ (5%)
    surplus_rate = 0.05
    model.set_surplus_rate(surplus_rate)
    print(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–ª–∏—à–∫–∞: {surplus_rate*100:.1f}%")
    
    # –î–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–ª–∏—à–∫–∞
    test_data_no_surplus = {
        'initial_balance': 100.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 95.0,  # 5.0 –∫–≥ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –î–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –∏–∑–ª–∏—à–∫–∞ (–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    test_data_with_surplus = {
        'initial_balance': 100.0,  # –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 99.75,    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º –∏–∑–ª–∏—à–∫–∞ –∏ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –±–µ–∑ —É—á–µ—Ç–∞ –∏–∑–ª–∏—à–∫–∞
    model_no_surplus = AdaptiveShrinkageModel()
    coeff_no_surplus = model_no_surplus.adapt_coefficients(test_data_no_surplus)
    forecast_no_surplus = model_no_surplus.predict_with_adaptation(7, initial_balance=100.0)
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∏–∑–ª–∏—à–∫–∞
    coeff_with_surplus = model.adapt_coefficients(test_data_with_surplus)
    forecast_with_surplus = model.predict_with_adaptation(7, initial_balance=100.0)
    
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –±–µ–∑ —É—á–µ—Ç–∞ –∏–∑–ª–∏—à–∫–∞: a={coeff_no_surplus['a']:.3f}, "
          f"b={coeff_no_surplus['b']:.3f}, c={coeff_no_surplus['c']:.3f}")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –±–µ–∑ —É—á–µ—Ç–∞ –∏–∑–ª–∏—à–∫–∞: {forecast_no_surplus:.3f} –∫–≥")
    
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∏–∑–ª–∏—à–∫–∞: a={coeff_with_surplus['a']:.3f}, "
          f"b={coeff_with_surplus['b']:.3f}, c={coeff_with_surplus['c']:.3f}")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ —Å —É—á–µ—Ç–æ–º –∏–∑–ª–∏—à–∫–∞: {forecast_with_surplus:.3f} –∫–≥")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–µ—Ç –∏–∑–ª–∏—à–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("   ‚úÖ –¢–µ—Å—Ç —É—á–µ—Ç–∞ –∏–∑–ª–∏—à–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_nomenclature_surplus_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–∞ –∏–∑–ª–∏—à–∫–∞ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞–º."""
    print("\nüè∑Ô∏è –¢–µ—Å—Ç 6: –£—á–µ—Ç –∏–∑–ª–∏—à–∫–∞ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞–º")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑–ª–∏—à–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä
    model.set_surplus_rate(0.05, "–°–ö–£–ú–ë–†–ò–Ø –•–ö")  # 5% –∏–∑–ª–∏—à–∫–∞ –¥–ª—è —Å–∫—É–º–±—Ä–∏–∏
    model.set_surplus_rate(0.10, "–°–ï–õ–¨–î–¨ –•–ö")    # 10% –∏–∑–ª–∏—à–∫–∞ –¥–ª—è —Å–µ–ª—å–¥–∏
    print("   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑–ª–∏—à–∫–∞:")
    print("     –°–ö–£–ú–ë–†–ò–Ø –•–ö: 5%")
    print("     –°–ï–õ–¨–î–¨ –•–ö: 10%")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫—É–º–±—Ä–∏–∏
    mackerel_data = {
        'initial_balance': 100.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 99.75,  # –° —É—á–µ—Ç–æ–º 5% –∏–∑–ª–∏—à–∫–∞ –∏ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–ª—å–¥–∏
    herring_data = {
        'initial_balance': 100.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 99.50,  # –° —É—á–µ—Ç–æ–º 10% –∏–∑–ª–∏—à–∫–∞ –∏ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
    mackerel_coeff = model.adapt_coefficients(mackerel_data, nomenclature="–°–ö–£–ú–ë–†–ò–Ø –•–ö")
    herring_coeff = model.adapt_coefficients(herring_data, nomenclature="–°–ï–õ–¨–î–¨ –•–ö")
    
    # –ü—Ä–æ–≥–Ω–æ–∑—ã —Å —É—á–µ—Ç–æ–º –∏–∑–ª–∏—à–∫–∞
    mackerel_forecast = model.predict_with_adaptation(7, initial_balance=100.0, nomenclature="–°–ö–£–ú–ë–†–ò–Ø –•–ö")
    herring_forecast = model.predict_with_adaptation(7, initial_balance=100.0, nomenclature="–°–ï–õ–¨–î–¨ –•–ö")
    
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –°–ö–£–ú–ë–†–ò–Ø –•–ö: a={mackerel_coeff['a']:.3f}, "
          f"b={mackerel_coeff['b']:.3f}, c={mackerel_coeff['c']:.3f}")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏ –¥–ª—è –°–ö–£–ú–ë–†–ò–Ø –•–ö: {mackerel_forecast:.3f} –∫–≥")
    
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –°–ï–õ–¨–î–¨ –•–ö: a={herring_coeff['a']:.3f}, "
          f"b={herring_coeff['b']:.3f}, c={herring_coeff['c']:.3f}")
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏ –¥–ª—è –°–ï–õ–¨–î–¨ –•–ö: {herring_forecast:.3f} –∫–≥")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–ª–∏—à–∫–∏ —Ä–∞–∑–Ω—ã–µ
    assert model.get_surplus_rate("–°–ö–£–ú–ë–†–ò–Ø –•–ö") == 0.05, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–∑–ª–∏—à–µ–∫ –¥–ª—è —Å–∫—É–º–±—Ä–∏–∏"
    assert model.get_surplus_rate("–°–ï–õ–¨–î–¨ –•–ö") == 0.10, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–∑–ª–∏—à–µ–∫ –¥–ª—è —Å–µ–ª—å–¥–∏"
    assert model.get_surplus_rate("–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –†–´–ë–ê") == 0.0, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–∑–ª–∏—à–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    
    print("   ‚úÖ –¢–µ—Å—Ç —É—á–µ—Ç–∞ –∏–∑–ª–∏—à–∫–∞ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_surplus_correction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –∏–∑–ª–∏—à–∫–∞."""
    print("\nüìè –¢–µ—Å—Ç 7: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –∏–∑–ª–∏—à–∫–∞")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    model.set_surplus_rate(0.10, "–¢–ï–°–¢ –†–´–ë–ê")  # 10% –∏–∑–ª–∏—à–∫–∞
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    original_data = {
        'initial_balance': 100.0,
        'incoming': 50.0,
        'outgoing': 20.0,
        'final_balance': 125.0,
        'storage_days': 7
    }
    
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"     –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {original_data['initial_balance']} –∫–≥")
    print(f"     –ü—Ä–∏—Ö–æ–¥: {original_data['incoming']} –∫–≥")
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    corrected_data = model._correct_for_surplus(original_data, "–¢–ï–°–¢ –†–´–ë–ê")
    
    expected_initial = 100.0 * 1.10  # 110 –∫–≥
    expected_incoming = 50.0 * 1.10  # 55 –∫–≥
    
    print(f"   –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"     –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {corrected_data['initial_balance']:.1f} –∫–≥ (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_initial:.1f} –∫–≥)")
    print(f"     –ü—Ä–∏—Ö–æ–¥: {corrected_data['incoming']:.1f} –∫–≥ (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_incoming:.1f} –∫–≥)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    assert abs(corrected_data['initial_balance'] - expected_initial) < 0.01, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞"
    assert abs(corrected_data['incoming'] - expected_incoming) < 0.01, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–∏—Ö–æ–¥–∞"
    
    print("   ‚úÖ –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")


