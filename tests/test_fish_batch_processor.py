#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä—Ç–∏—è—Ö —Ä—ã–±—ã.
"""

import sys
import os
import pandas as pd
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.core.specialized_fish_data_processor import FishBatchDataProcessor


def test_fish_batch_processor():
    """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä—Ç–∏—è—Ö —Ä—ã–±—ã."""
    print("üß™ –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä—Ç–∏—è—Ö —Ä—ã–±—ã")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = FishBatchDataProcessor()
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
    test_file = '–∏—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–î–ª—è_—Ä–∞—Å—á–µ—Ç–∞_–∫–æ—ç—Ñ—Ñ/b3ded820-4385-4a42-abc7-75dc0756d335_6ba7ac50-fb1a-4bea-9489-265bdfdcb8d1_–≤—Å—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 15.07.25 –ø–æ 21.07.25.xls'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(test_file):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False
    
    print(f"üìÇ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–∞
        print("\n1Ô∏è‚É£  –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞...")
        df_result = processor.process_fish_batch_excel(test_file)
        
        if not df_result.empty:
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df_result)}")
            print(f"üìã –°—Ç–æ–ª–±—Ü—ã: {list(df_result.columns)}")
            print(f"\nÏÉò –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:")
            print(df_result.head(3))
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É—Å—É—à–∫–∏
        print("\n2Ô∏è‚É£  –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—É—à–∫–∏...")
        results = processor.calculate_shrinkage_for_batches(test_file, use_adaptive=True)
        
        if results['status'] == 'success':
            print(f"‚úÖ –†–∞—Å—á–µ—Ç —É—Å—É—à–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results['coefficients'])}")
            print(f"üìà –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {results['summary']['avg_accuracy']:.2f}%")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_results_dir = os.path.join('—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '—Ç–µ—Å—Ç–æ–≤—ã–µ_–¥–∞–Ω–Ω—ã–µ')
            os.makedirs(test_results_dir, exist_ok=True)
            test_results_file = os.path.join(test_results_dir, 'fish_batch_test_results.json')
            
            with open(test_results_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {test_results_file}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 3):")
            for i, coeff in enumerate(results['coefficients'][:3]):
                print(f"   {coeff['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']}:")
                print(f"     a={coeff['a']:.6f}, b={coeff['b']:.6f}, c={coeff['c']:.6f}")
                print(f"     –¢–æ—á–Ω–æ—Å—Ç—å: {coeff['–¢–æ—á–Ω–æ—Å—Ç—å']:.2f}%")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—É—à–∫–∏: {results['message']}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
        print("\n3Ô∏è‚É£  –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —É—Å—É—à–∫–∏ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é...")
        results_basic = processor.calculate_shrinkage_for_batches(test_file, use_adaptive=False)
        
        if results_basic['status'] == 'success':
            print(f"‚úÖ –†–∞—Å—á–µ—Ç —É—Å—É—à–∫–∏ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results_basic['coefficients'])}")
            print(f"üìà –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {results_basic['summary']['avg_accuracy']:.2f}%")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—É—à–∫–∏ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é: {results_basic['message']}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_data_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 70)
    
    processor = FishBatchDataProcessor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        ("–æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö", True),  # –î–æ–∫—É–º–µ–Ω—Ç
        ("–Ω–∞–∫–ª–∞–¥–Ω–∞—è 001", True),      # –î–æ–∫—É–º–µ–Ω—Ç
        ("21.07.2025", True),        # –î–∞—Ç–∞
        ("15.07.2025 14:30:00", True), # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        ("–ú–æ–Ω–µ—Ç–∫–∞ —Ä—ã–±–∞", False),     # –ü—Ä–æ–¥—É–∫—Ç
        ("–í–Ø–õ–ï–ù–ê–Ø –†–´–ë–ê", False),     # –ü—Ä–æ–¥—É–∫—Ç
    ]
    
    print("üîç –¢–µ—Å—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ —Å—Ç—Ä–æ–∫:")
    all_passed = True
    
    for i, (text_val, expected) in enumerate(test_cases):
        is_document = processor._is_document_row(text_val)
        is_date = processor._is_date_row(text_val)
        is_product = processor._is_product_row(text_val)
        
        # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–∞—Ç –æ–∂–∏–¥–∞–µ–º True, –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ False
        actual = is_document or is_date
        status = "‚úÖ" if actual == expected else "‚ùå"
        
        print(f"   {status} '{text_val}': –¥–æ–∫—É–º–µ–Ω—Ç={is_document}, –¥–∞—Ç–∞={is_date}, –ø—Ä–æ–¥—É–∫—Ç={is_product}")
        
        if actual != expected:
            all_passed = False
    
    return all_passed


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê –î–ê–ù–ù–´–• –û –ü–ê–†–¢–ò–Ø–• –†–´–ë–´")
    print("=" * 80)
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    validation_success = test_data_validation()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    processing_success = test_fish_batch_processor()
    
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if validation_success and processing_success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚úÖ –†–∞—Å—á–µ—Ç —É—Å—É—à–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        print("   ‚úÖ –û–±–µ –º–æ–¥–µ–ª–∏ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∏ –±–∞–∑–æ–≤–∞—è) —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∞—Ä—Ç–∏—è—Ö —Ä—ã–±—ã")
        print("   ‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã/—Ç–µ—Å—Ç–æ–≤—ã–µ_–¥–∞–Ω–Ω—ã–µ'")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        if not validation_success:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö")
        if not processing_success:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ä–∞—Å—á–µ—Ç–æ–º —É—Å—É—à–∫–∏")
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)