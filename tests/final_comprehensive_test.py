#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ Excel —Ñ–∞–π–ª–æ–≤
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞


from src.core.excel_hierarchy_preserver import ExcelHierarchyPreserver, json_to_excel

def final_comprehensive_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã."""
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    print("\nüîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    try:
        from src.core.excel_hierarchy_preserver import ExcelHierarchyPreserver, json_to_excel
        from src.core.shrinkage_system import ShrinkageSystem
        from src.core.json_parser import parse_from_json
        from src.core.data_processor import DataProcessor
        from src.core.reporting import ReportGenerator
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}"
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    print("\nüìÇ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏...")
    
    test_files_dir = Path("—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    assert test_files_dir.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    excel_files = list(test_files_dir.glob("*.xlsx"))
    assert excel_files, "–¢–µ—Å—Ç–æ–≤—ã–µ Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    test_excel_file = str(excel_files[0])
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª: {os.path.basename(test_excel_file)}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Excel ‚Üí JSON —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    print("\nüîÑ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Excel ‚Üí JSON...")
    json_file = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã/—Ñ–∏–Ω–∞–ª—å–Ω—ã–π_—Ç–µ—Å—Ç.json"
    
    try:
        preserver = ExcelHierarchyPreserver(test_excel_file)
        assert preserver.to_json(json_file), "–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Excel ‚Üí JSON"
        print(f"‚úÖ Excel ‚Üí JSON: {os.path.basename(json_file)}")
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}"
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON —Ñ–∞–π–ª–∞
    print("\nüìÑ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JSON —Ñ–∞–π–ª–∞...")
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        
        assert 'grouping_info' in json_data, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ JSON —Ñ–∞–π–ª–µ"
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –≤ JSON —Ñ–∞–π–ª–µ")
        grouping_sheets = len(json_data['grouping_info'])
        print(f"   –õ–∏—Å—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π: {grouping_sheets}")
        
        for sheet_name, group_info in json_data['grouping_info'].items():
            if 'row_outline_levels' in group_info:
                row_groups = len([k for k, v in group_info['row_outline_levels'].items() if v != 0])
                print(f"   –õ–∏—Å—Ç '{sheet_name}': {row_groups} –≥—Ä—É–ø–ø —Å—Ç—Ä–æ–∫")
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON —Ñ–∞–π–ª–∞: {e}"
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON ‚Üí Excel —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    print("\nüîÑ 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSON ‚Üí Excel...")
    restored_excel_file = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã/—Ñ–∏–Ω–∞–ª—å–Ω—ã–π_–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π_—Ç–µ—Å—Ç.xlsx"
    
    try:
        assert json_to_excel(json_file, restored_excel_file), "–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSON ‚Üí Excel"
        print(f"‚úÖ JSON ‚Üí Excel: {os.path.basename(restored_excel_file)}")
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}"
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüîé 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...")
    files_to_check = [
        test_excel_file,
        json_file,
        restored_excel_file
    ]
    
    for file_path in files_to_check:
        assert os.path.exists(file_path), f"–§–∞–π–ª {os.path.basename(file_path)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        print(f"‚úÖ {os.path.basename(file_path)}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    print("\nüìä 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤...")
    original_size = os.path.getsize(test_excel_file)
    restored_size = os.path.getsize(restored_excel_file)
    
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {original_size} –±–∞–π—Ç")
    print(f"   –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π: {restored_size} –±–∞–π—Ç")
    
    # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\nüéØ 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    try:
        from openpyxl import load_workbook
        wb = load_workbook(restored_excel_file)
        sheet_count = len(wb.sheetnames)
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {sheet_count} –ª–∏—Å—Ç–æ–≤")
        wb.close()
        
        with open(json_file, 'r', encoding='utf-8') as f:
            json_content = f.read()
            assert len(json_content) > 100, "JSON —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            print("‚úÖ JSON —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
                
    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"

    # 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ workflow (JSON -> DataFrame -> –†–∞—Å—á–µ—Ç)
    print("\n‚öôÔ∏è 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ workflow...")
    try:
        dataframe = parse_from_json(json_file)
        assert not dataframe.empty, "DataFrame –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"
        print(f"‚úÖ JSON -> DataFrame: —É—Å–ø–µ—à–Ω–æ, {len(dataframe)} —Å—Ç—Ä–æ–∫")

        system = ShrinkageSystem()
        results = system.process_dataset(dataframe, "final_test.json", use_adaptive=True)
        assert results['status'] == 'success', "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞"
        print("‚úÖ ShrinkageSystem.process_dataset: —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        assert False, f"–û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º workflow: {e}"

    print("\n" + "=" * 60)
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    
    print("\nüéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û:")
    print("   ‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π")
    print("   ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Excel ‚Üí JSON —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
    print("   ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON ‚Üí Excel —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
    print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤ DataFrame")
    print("   ‚úÖ –†–∞—Å—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON")
    print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤")
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")
    
    print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –í PRODUCTION!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    try:
        success = final_comprehensive_test()
        if success:
            print("\nüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("   –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        else:
            print("\n‚ùå –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()