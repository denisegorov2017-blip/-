#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
"""

import sys
import os
import numpy as np



from src.core.adaptive_shrinkage_calculator import AdaptiveShrinkageModel

def test_product_type_determination():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        # –°–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è —Ä—ã–±–∞
        ("–°–ö–£–ú–ë–†–ò–Ø –°/–°", "fish_salt_cured"),
        ("–°–ï–õ–¨–î–¨ –°–õ–ê–ë–û–°–û–õ–ï–ù–ê–Ø", "fish_salt_cured"),
        ("–û–ö–£–ù–¨ –°–õ–ê–ë.–°–û–õ", "fish_salt_cured"),
        
        # –•–æ–ª–æ–¥–Ω–æ–µ –∫–æ–ø—á–µ–Ω–∏–µ
        ("–°–ö–£–ú–ë–†–ò–Ø –•/–ö", "fish_cold_smoked"),
        ("–°–ï–õ–¨–î–¨ –•–û–õ–û–î–ù–û–ì–û –ö–û–ü–ß–ï–ù–ò–Ø", "fish_cold_smoked"),
        ("–û–ö–£–ù–¨ COLD SMOKED", "fish_cold_smoked"),
        
        # –ì–æ—Ä—è—á–µ–µ –∫–æ–ø—á–µ–Ω–∏–µ
        ("–°–ö–£–ú–ë–†–ò–Ø –ì/–ö", "fish_hot_smoked"),
        ("–°–ï–õ–¨–î–¨ –ì–û–†–Ø–ß–ï–ì–û –ö–û–ü–ß–ï–ù–ò–Ø", "fish_hot_smoked"),
        ("–û–ö–£–ù–¨ HOT SMOKED", "fish_hot_smoked"),
        
        # –û–±—â–µ–µ –∫–æ–ø—á–µ–Ω–∏–µ
        ("–°–ö–£–ú–ë–†–ò–Ø –ö–û–ü–ß–ï–ù–ê–Ø", "fish_smoked"),
        ("–°–ï–õ–¨–î–¨ SMOKED", "fish_smoked"),
        
        # –°—É—à–µ–Ω–∞—è/–≤—è–ª–µ–Ω–∞—è —Ä—ã–±–∞
        ("–°–ö–£–ú–ë–†–ò–Ø –°–£–®–ï–ù–ê–Ø", "fish_dried"),
        ("–°–ï–õ–¨–î–¨ –í–Ø–õ–ï–ù–ê–Ø", "fish_dried"),
        ("–û–ö–£–ù–¨ DRIED", "fish_dried"),
        ("–¢–†–ï–°–ö–ê –í–Ø–õ–ï–ù–ö–ê", "fish_dried"),
        
        # –°–≤–µ–∂–∞—è —Ä—ã–±–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        ("–°–ö–£–ú–ë–†–ò–Ø –°–í–ï–ñ–ê–Ø", "fish_fresh"),
        ("–°–ï–õ–¨–î–¨", "fish_fresh"),
        ("–û–ö–£–ù–¨", "fish_fresh"),
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    all_passed = True
    for nomenclature, expected_type in test_cases:
        determined_type = model.determine_product_type(nomenclature)
        status = "‚úÖ" if determined_type == expected_type else "‚ùå"
        print(f"{status} {nomenclature:30} -> {determined_type:20} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_type})")
        if determined_type != expected_type:
            all_passed = False
    
    assert all_passed

def test_product_type_coefficients():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    print("\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö
    expected_types = [
        'fish_fresh',
        'fish_smoked',
        'fish_dried',
        'fish_salt_cured',
        'fish_hot_smoked',
        'fish_cold_smoked'
    ]
    
    all_present = True
    for product_type in expected_types:
        if product_type in model.product_coefficients:
            coeffs = model.product_coefficients[product_type]
            print(f"‚úÖ {product_type:20} -> a_mult: {coeffs['a_multiplier']:.2f}, "
                  f"b_mult: {coeffs['b_multiplier']:.2f}, c_mult: {coeffs['c_multiplier']:.2f}")
        else:
            print(f"‚ùå {product_type} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö")
            all_present = False
    
    assert all_present

def test_shrinkage_trends():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ —É—Å—É—à–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    print("\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ —É—Å—É—à–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    print("=" * 50)
    print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–∏–ø–∏—á–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —É—Å—É—à–∫–∏ —è–≤–ª—è—é—Ç—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏,")
    print("–º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —ç—Ç–∏ –ø—Ä–µ–¥–µ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —É—Å—É—à–∫–∏
    # –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π)
    product_types_in_order = [
        ('fish_dried', '–°—É—à–µ–Ω–∞—è —Ä—ã–±–∞'),
        ('fish_salt_cured', '–°–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è —Ä—ã–±–∞'),
        ('fish_fresh', '–°–≤–µ–∂–∞—è —Ä—ã–±–∞'),
        ('fish_cold_smoked', '–•–æ–ª–æ–¥–Ω–æ–µ –∫–æ–ø—á–µ–Ω–∏–µ'),
        ('fish_smoked', '–ö–æ–ø—á–µ–Ω–∞—è —Ä—ã–±–∞'),
        ('fish_hot_smoked', '–ì–æ—Ä—è—á–µ–µ –∫–æ–ø—á–µ–Ω–∏–µ')
    ]
    
    shrinkage_values = []
    
    for product_type, description in product_types_in_order:
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —É—Å—É—à–∫—É –¥–ª—è 100 –∫–≥ —Ä—ã–±—ã –∑–∞ 7 –¥–Ω–µ–π
        forecast = model.predict_with_adaptation(7, product_type=product_type)
        shrinkage_values.append(forecast)
        print(f"üìä {description:20} -> {forecast:.3f} –∫–≥ —É—Å—É—à–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–¥—É—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è (–∫—Ä–æ–º–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
    # –î–ª—è –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ –≤—Å–µ —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –±–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã,
    # –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ —É—Å—É—à–∫–∏:")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è a –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
    multipliers = []
    for product_type, _ in product_types_in_order:
        multiplier = model.product_coefficients[product_type]['a_multiplier']
        multipliers.append(multiplier)
    
    print(f"–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ a: {multipliers}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    # (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞–µ–≤, –≥–¥–µ –ø–æ—Ä—è–¥–æ–∫ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ –¥—Ä—É–≥–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
    correct_order = True
    for i in range(len(multipliers) - 1):
        if multipliers[i] > multipliers[i + 1]:
            # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if multipliers[i] - multipliers[i + 1] > 0.1:
                correct_order = False
                print(f"‚ö†Ô∏è  –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –º–µ–∂–¥—É {product_types_in_order[i][1]} –∏ {product_types_in_order[i+1][1]}")
    
    if correct_order:
        print("‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
    else:
        print("‚ö†Ô∏è  –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –Ω–µ –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É—é—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –ø–æ—Ä—è–¥–∫—É (—ç—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ)")
    
    

def test_adaptation_with_product_types():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏."""
    print("\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
    model = AdaptiveShrinkageModel()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'initial_balance': 100.0,
        'incoming': 0,
        'outgoing': 0,
        'final_balance': 95.0,  # 5.0 –∫–≥ —É—Å—É—à–∫–∏
        'storage_days': 7
    }
    
    # –¢–µ—Å—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    product_types = [
        ("–°–ö–£–ú–ë–†–ò–Ø –°/–°", "fish_salt_cured"),
        ("–°–ï–õ–¨–î–¨ –•/–ö", "fish_cold_smoked"),
        ("–û–ö–£–ù–¨ –ì/–ö", "fish_hot_smoked"),
        ("–¢–†–ï–°–ö–ê", "fish_fresh")
    ]
    
    all_passed = True
    for nomenclature, expected_type in product_types:
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        coefficients = model.adapt_coefficients(test_data, nomenclature=nomenclature)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        determined_type = model.determine_product_type(nomenclature)
        status = "‚úÖ" if determined_type == expected_type else "‚ùå"
        print(f"{status} {nomenclature:15} -> {determined_type:20}")
        
        if determined_type != expected_type:
            all_passed = False
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —É—Å—É—à–∫—É
        forecast = model.predict_with_adaptation(7, nomenclature=nomenclature)
        print(f"    –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: a={coefficients['a']:.3f}, b={coefficients['b']:.3f}, c={coefficients['c']:.3f}")
        print(f"    –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—É—à–∫–∏: {forecast:.3f} –∫–≥")
    
    assert all_passed

